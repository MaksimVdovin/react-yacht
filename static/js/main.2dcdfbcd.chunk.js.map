{"version":3,"sources":["components/About/About.jsx","components/Navbar/Navbar.jsx","components/Board/Dices/Dices.jsx","math/math.js","components/Board/Combinations/Combinations.jsx","components/Board/StartGame/StartGame.jsx","components/Board/Board.jsx","redux/boardReducer.js","redux/dicesReducer.js","api/api.js","redux/winnersReducer.js","components/Board/BoardContainer.jsx","components/Rules/Rules.jsx","components/Plans/Plans.jsx","components/common/Preloader/Preloader.js","components/Winners/Winners.jsx","redux/settings/settingReducer.js","components/Header/Header.js","components/Header/HeaderContainer.jsx","App.js","serviceWorker.js","redux/reducers.js","index.js"],"names":["About","props","className","Navbar","to","pathname","Dices","Object","keys","dicesValue","map","dice","index","key","checked","onClick","diceId","id","getPickDice","currentRoll","maxRoll","value","messageAboutStep","length","randomInteger","min","max","rand","Math","random","round","getDiceValue","diceNumber","getDicesValues","dicesValuesAsArray","i","push","getChance","reduce","accumulator","currentValue","getSum","dicesValues","result","amount","uniq","a","sort","filter","item","pos","ary","countSumOfRepeatElemensInDices","repeatedAmount","prevValue","currValue","getSet","getYacht","getSmallStreet","getBigStreet","getFullHouse","getBonus","combinations","getSubTotal","getTotal","getResultForCurrentCombination","currentCombinationdType","Combinations","combination","name","combinationId","dicesWithValue","R","canWrite","canChange","resultOfCurrent","type","resultOfSubTotal","writeResult","totalValue","subTotal","bonusTotal","getTotalScore","resetPossibleValues","getResetDices","newMessageAboutStep","onWriteValue","possibleValue","StartGame","window","confirm","startNewGame","Board","state","dices","isGameFinished","sumOfCanChange","console","log","useState","setName","setId","score","writeWinner","onWriteResult","placeholder","onChange","event","target","dicesWithChecked","getMakeRoll","onRollingDices","initialState","TotalScore","getPossibleValue","dispatch","writePossibleValue","boardReducer","action","isChange","dicesReducer","newDicesValue","newCurrentRoll","newMessage","winnersAPI","axios","baseURL","winner","winners","getWinners","writeWinnerOnTable","response","config","data","winnersReducer","compose","connect","board","getWriteResult","makeTabuForChange","subTotalValue","pickDice","newValue","makeNewDiceValue","makeRoll","possibleCombinations","getResultForAllCombination","writeMessageAboutStep","Rules","Plans","Prealoder","isLoading","settings","getAllWinners","setState","preloader","setPreloader","onShowWinners","get","isDark","isInitialized","setThemeInLocalStorage","settingReducer","Header","exact","changeTheme","localStorage","setItem","isFetching","initialalizeApp","isDarkFromLS","getItem","useEffect","basename","process","Suspense","fallback","path","render","component","Winners","BoardContainer","Boolean","location","hostname","match","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","reducers","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2dcdfbcd.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst About = (props) => {\r\n    return (\r\n        <div className=\"page\">\r\n\r\n            <h2 className=\"page-title\">About page</h2>\r\n\r\n            <div className=\"page-text\">\r\n                It's a little game that i found when studies at school.\r\n                <br/>\r\n                First time (10 years ago) i made formula and when i choised developer life\r\n                i made first project (honestly very bad, with Jquery and bootstrap)\r\n                <br/>\r\n                and now i want to make best app with this stack:\r\n                react, redux, react-router-dom, react-hooks, scss, webpack\r\n                <br/>\r\n                I WIll add next versions with time.\r\n                <br/>\r\n                now its like model\r\n                <br/>\r\n                design 3/10 (without good design) <br/>\r\n                code finish 1/10 (just for trying game) <br/> server 0/10 (none)\r\n            </div>\r\n\r\n            <div className=\"page-text\">\r\n                <span className={'page-data'}>13.07.2020  </span>\r\n                <span className=\"page-text-little\">update v.1.10</span> <br/>\r\n                Was add <br/>\r\n                - night theme<br/>\r\n            </div>\r\n\r\n\r\n            <div className=\"page-text\">\r\n                <span className={'page-data'}>12.07.2020  </span>\r\n                <span className=\"page-text-little\">update v.1.00</span> <br/>\r\n                Was add <br/>\r\n                - write result (name + score) <br/>\r\n                - winners (with server)\r\n            </div>\r\n\r\n            <div className=\"page-text\">\r\n                <span className={'page-data'}>06.07.2020  </span>\r\n                <span className=\"page-text-little\">update v.0.81</span> <br/>\r\n                Design was updated <br/>\r\n                Btn new-game was added.\r\n            </div>\r\n\r\n\r\n            <div className=\"page-text\">\r\n                   <span className={'page-data'}>0.3.07.2020  </span>\r\n                <span className=\"page-text-little\"> first realise v.0.8 </span>\r\n                <br/>\r\n                Free play, table, score. So, single player can play.\r\n\r\n            </div>\r\n       </div>\r\n    );\r\n}\r\n\r\nexport default About;","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport \"./navbar.scss\";\r\n\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className=\"nav\">\r\n            <Link\r\n                to=\"/\"\r\n            >Home</Link>\r\n            <Link to=\"/about\" >About</Link>\r\n            <Link to=\"/rules\" >Rules</Link>\r\n            <Link to={{\r\n                pathname: '/board/'\r\n            }}>Board game</Link>\r\n            <Link to=\"/Plans\" >Plans</Link>\r\n            <Link to=\"/winners\" >winners</Link>\r\n\r\n        </nav>\r\n    );\r\n};\r\nexport default  Navbar;","import React from \"react\";\r\n\r\nconst Dices = (props) => {\r\n    const onPickDice = (diceId) => {\r\n        props.getPickDice(diceId, props.currentRoll, props.maxRoll, props.dicesValue[diceId].checked);\r\n    };\r\n\r\n    return (\r\n            <div className=\"result\" >\r\n                {Object.keys(props.dicesValue).map((dice, index) =>\r\n                    <div key={index}\r\n                         className={`dice ${props.dicesValue[dice].checked ? 'active' : ' '}`}\r\n                         onClick={() => onPickDice(props.dicesValue[dice].id)}\r\n                    >{props.dicesValue[dice].value}\r\n                    </div>\r\n                )}\r\n\r\n                {props.currentRoll > 0 ? <div className=\"result-block\">бросок {props.currentRoll }</div> : null}\r\n                {props.messageAboutStep.length > 0\r\n                    ? <div className={\"messageAboutStep\"}> {props.messageAboutStep} </div>\r\n                    : null}\r\n            </div>\r\n    );\r\n};\r\n\r\nexport default Dices;","import * as R from 'ramda'\r\n\r\n// random from MIN to MAX //\r\n\r\n\r\nconst ONES = 'ONES';\r\nconst TWOES = 'TWOES';\r\nconst THREES = 'THREES';\r\nconst FOURS = 'FOURS';\r\nconst FIVES = 'FIVES';\r\n\r\nconst SIXES = 'SIXES';\r\nconst SUB_TOTAL = 'SUB_TOTAL';\r\nconst BONUS = 'BONUS';\r\nconst THREE_OF_A_KIND = 'THREE_OF_A_KIND';\r\nconst FOUR_OF_A_KIND = 'FOUR_OF_A_KIND';\r\n\r\nconst FULL_HOUSE = 'FULL_HOUSE';\r\nconst SMALL_STRAIGHT = 'SMALL_STRAIGHT';\r\nconst LARGE_STRAIGHT = 'LARGE_STRAIGHT';\r\nconst YACHT = 'YACHT';\r\nconst CHANCE = 'CHANCE';\r\nconst TOTAL_SCORE = 'TOTAL_SCORE';\r\n\r\n\r\nexport function randomInteger(min, max) {\r\n    // получить случайное число от (min-0.5) до (max+0.5)\r\n    let rand = min - 0.5 + Math.random() * (max - min + 1);\r\n    return Math.round(rand);\r\n}\r\n\r\nexport const makeNewDiceValue = (dicesValue) => {\r\n    let newDicesValue = dicesValue;\r\n    let newValue;\r\n    for (let i = 1; i < 6; i++) {\r\n        newValue = randomInteger(1, 6);\r\n        if (newDicesValue[i].checked) {\r\n            newDicesValue = R.assocPath(\r\n                [i, 'value'],\r\n                newValue,\r\n                newDicesValue\r\n            );\r\n        } else {\r\n            newDicesValue = R.assocPath(\r\n                [i, 'value'],\r\n                newDicesValue[i].value,\r\n                newDicesValue\r\n            );\r\n        }\r\n    }\r\n    return newDicesValue;\r\n}\r\n\r\nexport const getDiceValue = (dicesValue, diceNumber) => {\r\n    return dicesValue[diceNumber+1].value\r\n}\r\n\r\nexport const getDicesValues = (dicesValue) => {\r\n    const dicesValuesAsArray = [];\r\n    for (let i = 0; i < 5; i++) {\r\n        dicesValuesAsArray.push(getDiceValue(dicesValue, i));\r\n    }\r\n    return dicesValuesAsArray;\r\n}\r\n\r\n\r\n// считает и пишет шанс\r\nexport const  getChance = (dicesValue) => {\r\n    const dicesValues = getDicesValues(dicesValue);\r\n    const result = dicesValues.reduce(((accumulator, currentValue) => accumulator + currentValue));\r\n    return result\r\n}\r\n\r\n// считает суммы\r\nexport const getSum = (i, dicesValue) => {\r\n    const dicesValues = getDicesValues(dicesValue);\r\n    const result =  (i * dicesValues.reduce((amount, currentValue) => currentValue === i ? ++amount : amount, 0));\r\n    switch (i) {\r\n        case 1: {\r\n            return result\r\n        }\r\n        case 2: {\r\n            return result\r\n        }\r\n        case 3: {\r\n            return result\r\n        }\r\n        case 4: {\r\n            return result\r\n        }\r\n        case 5: {\r\n            return result\r\n        }\r\n        case 6: {\r\n            return result\r\n        }\r\n        default:\r\n            return;\r\n    }\r\n\r\n}\r\n\r\n// сортировка по порядку\r\nexport const compareNumeric = (a, b) => {\r\n    return a - b;\r\n}\r\n\r\n// оставляет только уникальные значения\r\nexport const unique = (arr) => {\r\n    let obj = {};\r\n\r\n    for (let i = 0; i < arr.length; i++) {\r\n        let str = arr[i];\r\n        obj[str] = true; // запомнить строку в виде свойства объекта\r\n    }\r\n    return Object.keys(obj); // или собрать ключи перебором для IE8-\r\n}\r\n\r\nexport const uniqueArray = (arr) => {\r\n    // let arrayCopy = [];\r\n    for (let key in arr) {\r\n        if (arr[key].includes) { }\r\n    }\r\n}\r\n\r\n\r\n// функция сортирует и удаляет повторяющие элементы\r\nexport const uniq = (a) => {\r\n    return a.sort().filter(function (item, pos, ary) {\r\n        return !pos || item !== ary[pos - 1];\r\n    })\r\n}\r\n// summ повтор элементов\r\n\r\nexport const countSumOfRepeatElemensInDices = (repeatedAmount, dicesValue) => {\r\n    let result = 0;\r\n    let amount = 1;\r\n    const dicesValueAsArray = getDicesValues(dicesValue).sort();\r\n\r\n    dicesValueAsArray.reduce((prevValue, currValue) => {\r\n        if (currValue === prevValue) { amount++; }\r\n        else { amount = 1; }\r\n        if (amount === repeatedAmount) { result = currValue * repeatedAmount; }\r\n        return currValue;\r\n    });\r\n    return result\r\n}\r\n\r\nexport const getSet = (repeatedAmount, dicesValue) => {\r\n\r\n    let result = countSumOfRepeatElemensInDices(repeatedAmount, dicesValue)\r\n\r\n    if (repeatedAmount === 3) {\r\n        return result\r\n    } else if (repeatedAmount === 4) {\r\n        return result\r\n    }\r\n\r\n}\r\n\r\nexport const  getYacht = (repeatedAmount, dicesValue) => {\r\n    let yachtAnswer = countSumOfRepeatElemensInDices(repeatedAmount, dicesValue);\r\n    let result;\r\n    if (yachtAnswer !== 0) {\r\n         result = 50;\r\n    } else {\r\n        result = 0;\r\n    }\r\n    return result\r\n}\r\n\r\nexport const getSmallStreet = (dicesValue) => {\r\n    let dicesValues = getDicesValues(dicesValue);\r\n    let i = 0; // для 1 2 3 4\r\n    let result;\r\n    dicesValues = uniq(dicesValues);\r\n\r\n    if (dicesValues[i] === (dicesValues[i + 1] - 1) && dicesValues[i + 1] === (dicesValues[i + 2] - 1) && dicesValues[i + 2] === (dicesValues[i + 3] - 1)) {\r\n        result = 25;\r\n    } else {\r\n     result = 0;\r\n    }\r\n    return result\r\n}\r\n\r\nexport const  getBigStreet =(dicesValue)  => {\r\n    let dicesValues = getDicesValues(dicesValue);\r\n    let i = 0; // для 1 2 3 4\r\n    let result;\r\n\r\n    dicesValues = uniq(dicesValues);\r\n\r\n    if (dicesValues[i] === (dicesValues[i + 1] - 1) && dicesValues[i + 1] === (dicesValues[i + 2] - 1) && dicesValues[i + 2] === (dicesValues[i + 3] - 1) && dicesValues[i + 3] === (dicesValues[i + 4] - 1)) {\r\n        result = 30;\r\n    } else {\r\n        result = 0;\r\n    }\r\n    return result\r\n}\r\n\r\n\r\nexport const  getFullHouse = (dicesValue) => {\r\n    let repeatedAmount = 4;\r\n    let dicesValues = getDicesValues(dicesValue);\r\n    let result;\r\n    let oneAnswer = countSumOfRepeatElemensInDices(repeatedAmount, dicesValue); // проверим, есть ли сет в массиве костей\r\n    if (oneAnswer === 0 && uniq(dicesValues).length === 2) {\r\n        result= 40;\r\n    } else {\r\n        result = 0;\r\n    }\r\n    return result\r\n}\r\n\r\n\r\n\r\nexport const getBonus = (combinations) =>{\r\n    let answer = getSubTotal(combinations)\r\n    let result = 0;\r\n    if (answer >62) {\r\n        result = 35;\r\n        return result\r\n    }\r\n    return result\r\n\r\n}\r\n\r\nexport const getSubTotal = (combinations) => {\r\n    let result = 0;\r\n    for (let i = 1; i < 7; i++) {\r\n        let answer = combinations[i].value;\r\n        result = result + answer;\r\n    }\r\n    return result\r\n}\r\n\r\nexport const getTotal = (combinations) =>{\r\n    let result = 0;\r\n    for (let i = 1; i < 15; i++) {\r\n        let answer = combinations[i].value\r\n        result = result + answer;\r\n    }\r\n\r\n    return result\r\n}\r\n\r\n\r\n\r\n// функция проверяет на число и если число, то возвращает 0\r\nexport const noNan = (el) => {\r\n    if (Number.isNaN(el) === false) {\r\n        return el;\r\n    } else {\r\n        return el = 0;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const getResultForCurrentCombination = (currentCombinationdType, dicesValue = {}, combinations) => {\r\n    switch(currentCombinationdType) {\r\n        case ONES: {\r\n            return getSum(1, dicesValue)\r\n        }\r\n        case TWOES: {\r\n            return getSum(2, dicesValue)\r\n        }\r\n        case THREES: {\r\n            return getSum(3, dicesValue)\r\n        }\r\n        case FOURS: {\r\n            return getSum(4, dicesValue)\r\n        }\r\n        case FIVES: {\r\n            return getSum(5, dicesValue)\r\n        }\r\n        case SIXES: {\r\n            return getSum(6, dicesValue)\r\n        }\r\n        case SUB_TOTAL: {\r\n            return getSubTotal(combinations)\r\n        }\r\n        case BONUS: {\r\n            return getBonus(combinations)\r\n        }\r\n        case THREE_OF_A_KIND: {\r\n            return getSet(3, dicesValue)\r\n        }\r\n        case FOUR_OF_A_KIND: {\r\n            return getSet(4, dicesValue)\r\n        }\r\n        case FULL_HOUSE: {\r\n            return getFullHouse(dicesValue)\r\n        }\r\n        case SMALL_STRAIGHT: {\r\n            return getSmallStreet(dicesValue)\r\n        }\r\n        case LARGE_STRAIGHT: {\r\n            return getBigStreet(dicesValue)\r\n        }\r\n        case YACHT: {\r\n            return getYacht(5, dicesValue)\r\n        }\r\n        case CHANCE: {\r\n            return getChance(dicesValue)\r\n        }\r\n        case TOTAL_SCORE: {\r\n            return getTotal( combinations)\r\n        }\r\n\r\n        default:\r\n            return 0;\r\n    }\r\n}\r\n\r\nexport const getResultForAllCombination = (dicesValue = {}, combinations) => {\r\n\r\n    let possibleCombinations = combinations;\r\n    // debugger\r\n    for (let i =1; i <17; i++) {\r\n        if (possibleCombinations[i].canChange) {\r\n            let result = null\r\n\r\n            switch(i) {\r\n                case 1: {\r\n                    result= getSum(1, dicesValue)\r\n                    break;\r\n\r\n                }\r\n                case 2: {\r\n                     result = getSum(2, dicesValue)\r\n                    break\r\n                }\r\n                case 3: {\r\n                     result = getSum(3, dicesValue)\r\n                    break\r\n                }\r\n                case 4: {\r\n                     result = getSum(4, dicesValue)\r\n                    break\r\n                }\r\n                case 5: {\r\n                     result = getSum(5, dicesValue)\r\n                    break\r\n                }\r\n                case 6: {\r\n                     result =  getSum(6, dicesValue)\r\n                    break\r\n                }\r\n                case 8: {\r\n                     result = getSet(3, dicesValue)\r\n                    break\r\n                }\r\n                case 9: {\r\n                     result = getSet(4, dicesValue)\r\n                    break\r\n                }\r\n                case 10: {\r\n                     result = getFullHouse(dicesValue)\r\n                    break\r\n                }\r\n                case 11: {\r\n                     result = getSmallStreet(dicesValue)\r\n                    break\r\n                }\r\n                case 12: {\r\n                     result = getBigStreet(dicesValue)\r\n                    break\r\n                }\r\n                case 13: {\r\n                     result = getYacht(5, dicesValue)\r\n                    break\r\n                }\r\n                case 14: {\r\n                     result = getChance(dicesValue)\r\n                    break\r\n                }\r\n                default:\r\n                     result = 0;\r\n            }\r\n            possibleCombinations = R.assocPath(\r\n                [i, 'possibleValue'],\r\n                result,\r\n                possibleCombinations\r\n            );\r\n\r\n        } else {\r\n            let result = 0;\r\n            possibleCombinations =R.assocPath(\r\n                [i, 'possibleValue'],\r\n                result,\r\n                possibleCombinations\r\n            );\r\n        }\r\n    }\r\n\r\n    return possibleCombinations;\r\n\r\n}\r\n\r\n","import React from \"react\";\r\nimport * as R from \"ramda\";\r\nimport {getResultForCurrentCombination, getSubTotal, getTotal} from \"../../../math/math\";\r\n\r\n\r\nconst Combinations = (props) => {\r\n\r\n    const onWriteValue = (combinationId) => {\r\n\r\n        const hasValue = (dice) => dice.value;\r\n        let dicesWithValue =R.filter(hasValue, props.dicesValue);\r\n        const canWrite = R.isEmpty(dicesWithValue);\r\n        if (props.currentRoll > 0) {\r\n            if (props.combinations[combinationId].canChange && !canWrite) {\r\n                let resultOfCurrent = getResultForCurrentCombination(props.combinations[combinationId].type,\r\n                    props.dicesValue, props.combinations);\r\n                let resultOfSubTotal = 0;\r\n                if (combinationId < 7) {\r\n                    resultOfSubTotal = getResultForCurrentCombination(props.combinations[combinationId].type,\r\n                        props.dicesValue, props.combinations);\r\n                }\r\n                props.writeResult(resultOfCurrent, combinationId);\r\n                let totalValue = getTotal(props.combinations) + resultOfCurrent;\r\n                let subTotal = getSubTotal(props.combinations) + resultOfSubTotal;\r\n                let bonusTotal = 0;\r\n                if (subTotal > 62) {\r\n                    bonusTotal = 35;\r\n                }\r\n                props.getTotalScore(totalValue, subTotal, bonusTotal);\r\n                props.resetPossibleValues();\r\n                props.getResetDices();\r\n\r\n            } else if (!props.combinations[combinationId].canChange) {\r\n                props.newMessageAboutStep('Выберите другое значение');\r\n            } else if (canWrite) {\r\n                props.newMessageAboutStep('Новый ход! Кидайте кости пожалуйста!');\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"combination\">\r\n            {Object.keys(props.combinations).map((combination, index) =>\r\n                <div className={'combination-item'} key={index}>\r\n                    <span className={\"combination-item-name\"}>{props.combinations[combination].name}</span>\r\n                    <span\r\n                        className={'combination-result'}\r\n                        onClick={() => onWriteValue(props.combinations[combination].id)}\r\n                    >\r\n                               <div className={'value'}> {props.combinations[combination].value}</div>\r\n                                <div className={'possible-value'}>\r\n                                    {props.combinations[combination].value\r\n                                    === null && props.combinations[combination].possibleValue}\r\n                                </div>\r\n                            </span>\r\n\r\n                </div>)}\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Combinations;","import React from \"react\";\r\n\r\nconst StartGame = (props) => {\r\n    const startNewGame = () => {\r\n        const isMakeStart = window.confirm(\"Начать новую игру?\");\r\n\r\n        if (isMakeStart) {\r\n            props.startNewGame();\r\n            props.getResetDices();\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n            <button\r\n                className={\"btn btn-second-action\"}\r\n                onClick={() => startNewGame()}>New Game</button>\r\n        </div>\r\n    );\r\n};\r\nexport default StartGame;","import React, {useState} from \"react\";\r\nimport './Board.scss';\r\nimport * as R from \"ramda\";\r\nimport Dices from \"./Dices/Dices\";\r\nimport Combinations from \"./Combinations/Combinations\";\r\nimport StartGame from \"./StartGame/StartGame\";\r\n\r\n\r\nconst Board = (props) => {\r\n\r\n    let state = props.dices;\r\n\r\n    const onRollingDices = (dices) => {\r\n        const isChecked = (dices) => dices.checked;\r\n        let dicesWithChecked =R.filter(isChecked, dices);\r\n        const canRoll = R.isEmpty(dicesWithChecked);\r\n\r\n        if (canRoll) {\r\n            props.newMessageAboutStep('Выберите кости или запишите результат!');\r\n        } else if (state.currentRoll < state.maxRoll && state.currentRoll >= 0) {\r\n            props.getMakeRoll(dices, state.currentRoll, props.combinations);\r\n            props.newMessageAboutStep('Хороший бросок. Запишем или кидаем дальше?!');\r\n\r\n            if (state.currentRoll + 1 === state.maxRoll) {\r\n            props.newMessageAboutStep('Это был последний бросок, запишите результат');\r\n            }\r\n        } else if (state.currentRoll === state.maxRoll) {\r\n            props.newMessageAboutStep('Бросков больше нет, запишите результат');\r\n        }\r\n    };\r\n\r\n    const isGameFinished = (combinations) => {\r\n        let sumOfCanChange = 0;\r\n        for (let i = 1; i < 16; i++) {\r\n            if (combinations[i].canChange) {\r\n                sumOfCanChange = sumOfCanChange + 1;\r\n            }\r\n        }\r\n        if (sumOfCanChange > 0) {\r\n            console.log(sumOfCanChange);\r\n            return false;\r\n        }\r\n        console.log('lol ', sumOfCanChange);\r\n        return true;\r\n    };\r\n\r\n    const onWriteResult = () => {\r\n            console.log(isGameFinished(props.combinations));\r\n        if (isGameFinished(props.combinations)) {\r\n            if (name.length < 1) {\r\n                props.newMessageAboutStep('Введите ваше имя');\r\n            }\r\n            setId(id +1);\r\n            let result = {name: name, score: props.combinations[16].value, id: id};\r\n            props.writeWinner(result);\r\n        } else {\r\n            props.newMessageAboutStep('Чтобы записать результат, завершите игру');\r\n        }\r\n        props.newMessageAboutStep('Готово!');\r\n    };\r\n    const [name, setName] = useState('');\r\n    const [id, setId] = useState(0);\r\n\r\n    const handleChange = (event) => {\r\n        setName(event.target.value);\r\n    };\r\n\r\n    return (\r\n            <div className=\"board-wrapper page\">\r\n                <h2\r\n                    className=\"page-title\"\r\n                >Board game</h2>\r\n                <StartGame\r\n                    getResetDices={props.getResetDices}\r\n                    startNewGame={props.startNewGame}\r\n                />\r\n                <div>\r\n                    <button\r\n                        className=\"btn btn-second-action\"\r\n                        onClick={() => onWriteResult()}\r\n                        >\r\n                        Write Result\r\n                    </button>\r\n                </div>\r\n                <div>\r\n                    <input\r\n                        className=\"input-name\"\r\n                        type=\"text\"\r\n                        name=\"name\"\r\n                        placeholder=\"Введите ваше имя\"\r\n                        value={state.value}\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n                <div className=\"board-table\">\r\n                    <Dices\r\n                        dicesValue={props.dices.dicesValue}\r\n                        currentRoll={props.dices.currentRoll}\r\n                        maxRoll={props.dices.maxRoll}\r\n                        getPickDice={props.getPickDice}\r\n                        messageAboutStep={props.dices.messageAboutStep}\r\n                    />\r\n                    <button\r\n                        className={\"btn btn-main-action\"}\r\n                        onClick={() => onRollingDices(state.dicesValue)}>ROLL!</button>\r\n\r\n                    <Combinations\r\n                        dices = {props.dices}\r\n                        dicesValue={props.dices.dicesValue}\r\n                        currentRoll={props.dices.currentRoll}\r\n                        maxRoll={props.dices.maxRoll}\r\n                        messageAboutStep={props.dices.messageAboutStep}\r\n                        combinations={props.combinations}\r\n                        getTotalScore={props.getTotalScore}\r\n                        resetPossibleValues={props.resetPossibleValues}\r\n                        getResetDices={props.getResetDices}\r\n                        writeResult={props.writeResult}\r\n                    />\r\n\r\n                </div>\r\n            </div>\r\n    );\r\n};\r\n\r\nexport default Board;","import * as R from 'ramda';\r\n\r\n\r\nconst WRITE_RESULT = 'WRITE_RESULT';\r\nconst RESET_POSSIBLE_VALUES = 'RESET_POSSIBLE_VALUES';\r\nconst GET_TOTAL_SCORE = 'GET_TOTAL_SCORE';\r\nconst MAKE_TABU_FOR_CHANGE = 'MAKE_TABU_FOR_CHANGE';\r\nconst WRITE_POSSIBLE_VALUE = 'WRITE_POSSIBLE_VALUE';\r\nconst START_NEW_GAME = '/BOARD/START_NEW_GAME';\r\n\r\nconst ONES = 'ONES';\r\nconst TWOES = 'TWOES';\r\nconst THREES = 'THREES';\r\nconst FOURS = 'FOURS';\r\nconst FIVES = 'FIVES';\r\nconst SIXES= 'SIXES';\r\nconst BONUS = 'BONUS';\r\nconst THREE_OF_A_KIND= 'THREE_OF_A_KIND';\r\nconst FOUR_OF_A_KIND= 'FOUR_OF_A_KIND';\r\nconst FULL_HOUSE= 'FULL_HOUSE';\r\nconst SMALL_STRAIGHT = 'SMALL_STRAIGHT';\r\nconst LARGE_STRAIGHT= 'LARGE_STRAIGHT';\r\nconst YACHT= 'YACHT';\r\nconst CHANCE = 'CHANCE';\r\nconst SUB_TOTAL = 'SUB_TOTAL';\r\nconst TOTAL_SCORE= 'TOTAL_SCORE';\r\n\r\n\r\n\r\nconst initialState = {\r\n    // combinations: {\r\n    //     '1': { id: 1, value: null, possibleValue: null,  name: 'Ones', type: ONES, canChange: false},\r\n    //     '2': { id: 2, value: null, possibleValue: null, name: 'Twoes', type: TWOES, canChange: false},\r\n    //     '3': {id: 3, value: null, possibleValue: null,name: 'Threes', type: THREES, canChange: false},\r\n    //     '4': {id: 4, value: null, possibleValue: null, name: 'fours', type: FOURS, canChange: false},\r\n    //     '5': {id: 5, value: null, possibleValue: null, name: 'fours', type: FIVES, canChange: false},\r\n    //     '6': {id: 6, value: null, possibleValue: null, name: 'Sixes', type: SIXES, canChange: false},\r\n    //     '7': {id: 7, value: null, possibleValue: null,name: 'Bonus', type: BONUS, canChange: false},\r\n    //     '8': {id: 8, value: null, possibleValue: null,name: 'Three of a kind', type: THREE_OF_A_KIND, canChange: false},\r\n    //     '9':{id: 9, value: null,possibleValue: null, name: 'Four of a kind', type: FOUR_OF_A_KIND, canChange: false},\r\n    //     '10': {id: 10, value: null,possibleValue: null,name: 'Full house', type: FULL_HOUSE, canChange: false},\r\n    //     '11':{id: 11, value: null, possibleValue: null, name: 'Small Straight', type: SMALL_STRAIGHT, canChange: false},\r\n    //     '12':{id: 12, value: null, possibleValue: null,name: 'Large Straight', type: LARGE_STRAIGHT, canChange: false},\r\n    //     '13':{id: 13, value: null,possibleValue: null, name: 'Yacht', type: YACHT, canChange: false},\r\n    //     '14': {id: 14, value: null, possibleValue: null,name: 'Chance', type: CHANCE, canChange: false},\r\n    //     '15': {id: 15, value: null, possibleValue: null,name: 'Sub Total', type: SUB_TOTAL, canChange: false},\r\n    //     '16':{id: 16, value: 2, possibleValue: null,name: 'Total Score', type: TOTAL_SCORE, canChange: false},\r\n    // }\r\n    combinations: {\r\n        '1': { id: 1, value: null, possibleValue: null,  name: 'Ones', type: ONES, canChange: true},\r\n        '2': { id: 2, value: null, possibleValue: null, name: 'Twoes', type: TWOES, canChange: true},\r\n        '3': {id: 3, value: null, possibleValue: null,name: 'Threes', type: THREES, canChange: true},\r\n        '4': {id: 4, value: null, possibleValue: null, name: 'fours', type: FOURS, canChange: true},\r\n        '5': {id: 5, value: null, possibleValue: null, name: 'fours', type: FIVES, canChange: true},\r\n        '6': {id: 6, value: null, possibleValue: null, name: 'Sixes', type: SIXES, canChange: true},\r\n        '7': {id: 7, value: null, possibleValue: null,name: 'Bonus', type: BONUS, canChange: false},\r\n        '8': {id: 8, value: null, possibleValue: null,name: 'Three of a kind', type: THREE_OF_A_KIND, canChange: true},\r\n        '9':{id: 9, value: null,possibleValue: null, name: 'Four of a kind', type: FOUR_OF_A_KIND, canChange: true},\r\n        '10': {id: 10, value: null,possibleValue: null,name: 'Full house', type: FULL_HOUSE, canChange: true},\r\n        '11':{id: 11, value: null, possibleValue: null, name: 'Small Straight', type: SMALL_STRAIGHT, canChange: true},\r\n        '12':{id: 12, value: null, possibleValue: null,name: 'Large Straight', type: LARGE_STRAIGHT, canChange: true},\r\n        '13':{id: 13, value: null,possibleValue: null, name: 'Yacht', type: YACHT, canChange: true},\r\n        '14': {id: 14, value: null, possibleValue: null,name: 'Chance', type: CHANCE, canChange: true},\r\n        '15': {id: 15, value: null, possibleValue: null,name: 'Sub Total', type: SUB_TOTAL, canChange: false},\r\n        '16':{id: 16, value: null, possibleValue: null,name: 'Total Score', type: TOTAL_SCORE, canChange: false},\r\n    }\r\n};\r\n\r\nconst boardReducer = (state = initialState, action) => {\r\n\r\n    switch(action.type) {\r\n\r\n        case WRITE_RESULT:\r\n            if (state.combinations[action.combinationId].canChange) {\r\n                return R.assocPath(\r\n                    ['combinations', action.combinationId, 'value'],\r\n                    action.result,\r\n                    state\r\n                );\r\n            }\r\n            return {...state};\r\n        case GET_TOTAL_SCORE: {\r\n            return R.assocPath(\r\n                ['combinations', action.id,  'value'],\r\n                action.totalValue,\r\n                state\r\n            );\r\n        }\r\n        case MAKE_TABU_FOR_CHANGE: {\r\n            return R.assocPath(\r\n                ['combinations', action.combinationId, 'canChange'],\r\n                action.isChange,\r\n                state\r\n            );\r\n        }\r\n        case WRITE_POSSIBLE_VALUE: {\r\n            return {\r\n                ...state,\r\n                combinations: action.combinations\r\n            };\r\n        }\r\n        case RESET_POSSIBLE_VALUES: {\r\n            return R.over(\r\n                R.lensProp('combinations'),\r\n                R.map(R.assoc('possibleValue', null)),\r\n                state\r\n            );\r\n        }\r\n        case START_NEW_GAME: {\r\n            return initialState;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst getWriteResult = (result, combinationId) => {\r\n    return {type: WRITE_RESULT, result, combinationId};\r\n};\r\n\r\nconst writePossibleValue = (combinations) => {\r\n    return {type: WRITE_POSSIBLE_VALUE, combinations};\r\n};\r\n\r\n\r\nexport const resetPossibleValues = () => {\r\n    return {type: RESET_POSSIBLE_VALUES};\r\n};\r\n\r\nconst makeTabuForChange = (combinationId, isChange) => {\r\n    return {type: MAKE_TABU_FOR_CHANGE, combinationId, isChange};\r\n};\r\nexport const writeResult = (result, combinationId) => {\r\n    return (dispatch) => {\r\n        dispatch(getWriteResult(result, combinationId));\r\n        dispatch(makeTabuForChange(combinationId, false));\r\n    };\r\n};\r\nconst TotalScore = (totalValue, id) => {\r\n    return {type: GET_TOTAL_SCORE, totalValue, id};\r\n};\r\n\r\nexport const getTotalScore = (totalValue, subTotalValue, bonusTotal) => {\r\n\r\n    return (dispatch) => {\r\n        dispatch(TotalScore(subTotalValue, 15));\r\n        dispatch(TotalScore(totalValue, 16));\r\n        dispatch(TotalScore(bonusTotal, 7));\r\n    };\r\n\r\n};\r\n\r\n\r\nexport const getPossibleValue = (combinations) => {\r\n    return (dispatch) => {\r\n        // debugger\r\n        dispatch(resetPossibleValues());\r\n        dispatch(writePossibleValue(combinations));\r\n\r\n    };\r\n};\r\n\r\nexport const startNewGame = () => {\r\n    return {type: START_NEW_GAME};\r\n};\r\n\r\n\r\n\r\nexport default boardReducer;\r\n\r\n\r\n\r\n\r\n\r\n// old writeresult as array\r\n// return {\r\n//     ...state,\r\n//     combinations: state.combinations.map((combination) => {\r\n//       if (combination.id - 1 === action.combinationId) {\r\n//         return { ...combination, value: action.result };\r\n//       }\r\n//       return combination;\r\n//     }),\r\n// }","import * as R from 'ramda';\r\nimport {getResultForAllCombination, makeNewDiceValue} from './../math/math';\r\nimport {getPossibleValue, resetPossibleValues} from \"./boardReducer\";\r\n\r\n\r\nconst MAKE_ROLL = 'MAKE_ROLL';\r\nconst PICK_DICE = 'PICK_DICE';\r\nconst NEW_MESSAGE_ABOUT_STEP = 'NEW_MESSAGE_ABOUT_STEP';\r\nconst RESET_DICES = 'RESET_DICES';\r\nconst RESET_CURRENT_ROLL = 'RESET_CURRENT_ROLL';\r\nconst MAKE_ALL_DICES_CHECKED = 'MAKE_ALL_DICES_CHECKED';\r\n\r\n\r\nconst initialState = {\r\n    dicesValue: {\r\n        '1':{ id: 1, value: null, checked: true},\r\n        '2':{id: 2, value: null, checked: true},\r\n        '3':{id: 3, value: null,checked: true},\r\n        '4':{id: 4, value: null,checked: true},\r\n        '5':{id: 5, value: null, checked: true}\r\n    },\r\n    currentRoll: 0,\r\n    maxRoll: 3,\r\n    messageAboutStep: 'Кидайте кости',\r\n};\r\n\r\n\r\n\r\n\r\nconst dicesReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case MAKE_ROLL: {\r\n            return {\r\n                ...state,\r\n                dicesValue: action.newDicesValue,\r\n                currentRoll: action.newCurrentRoll\r\n            };\r\n        }\r\n        case PICK_DICE: {\r\n            // let checked = !state.dicesValue[action.diceId].checked;\r\n            return R.assocPath(\r\n                ['dicesValue', action.diceId, 'checked'],\r\n                action.checked,\r\n                state\r\n            );\r\n        }\r\n        case NEW_MESSAGE_ABOUT_STEP: {\r\n            return {\r\n                ...state,\r\n                messageAboutStep: action.newMessage\r\n            };\r\n        }\r\n        case RESET_DICES: {\r\n            return R.over(\r\n                R.lensProp('dicesValue'),\r\n                R.map(R.assoc('value', null)),\r\n                state\r\n            );\r\n        }\r\n        case MAKE_ALL_DICES_CHECKED: {\r\n            return R.over(\r\n                R.lensProp('dicesValue'),\r\n                R.map(R.assoc('checked', true)),\r\n                state\r\n            );\r\n        }\r\n        case RESET_CURRENT_ROLL: {\r\n            return {\r\n                ...state,\r\n                currentRoll: 0\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst pickDice = (diceId, checked) => {\r\n    return {type: PICK_DICE, diceId, checked};\r\n};\r\nexport const getPickDice = (diceId, currentRoll, maxRoll, checked) => {\r\n    return (dispatch) => {\r\n        if (currentRoll < maxRoll && currentRoll > 0) {\r\n            dispatch(pickDice(diceId, !checked));\r\n        }\r\n    };\r\n};\r\n\r\nconst makeRoll = (newDicesValue, newCurrentRoll) => {\r\n    return {\r\n        type: MAKE_ROLL,newDicesValue,newCurrentRoll\r\n    };\r\n};\r\nconst writeMessageAboutStep = (newMessage) => {\r\n    return {\r\n        type: NEW_MESSAGE_ABOUT_STEP, newMessage\r\n    };\r\n};\r\n\r\nexport const newMessageAboutStep = (newMessage) => {\r\n    return (dispatch) => {\r\n        dispatch(writeMessageAboutStep(newMessage));\r\n    };\r\n};\r\n\r\nconst resetDices = () => {\r\n    return {\r\n        type: RESET_DICES\r\n    };\r\n};\r\n\r\nconst makeAllDicesChecked = () => {\r\n    return {\r\n        type: MAKE_ALL_DICES_CHECKED\r\n    };\r\n};\r\n\r\nconst resetCurrentRoll = () => {\r\n    return {\r\n        type: RESET_CURRENT_ROLL\r\n    };\r\n};\r\n\r\nexport const getResetDices = () => {\r\n    return (dispatch) => {\r\n        dispatch(resetDices());\r\n        dispatch(resetCurrentRoll());\r\n        dispatch(makeAllDicesChecked());\r\n    };\r\n};\r\n\r\n\r\nexport const getMakeRoll = (dicesValue, currentRoll, combinations) => {\r\n    return (dispatch) => {\r\n         let newDicesValue = makeNewDiceValue(dicesValue);\r\n\r\n         dispatch(resetPossibleValues());\r\n         dispatch(makeRoll(newDicesValue, currentRoll +1));\r\n        dispatch(getPossibleValue(getResultForAllCombination(newDicesValue, combinations)));\r\n    };\r\n};\r\n\r\nexport default dicesReducer;\r\n\r\n","import * as axios from \"axios\";\r\n\r\nexport const axiosLink =  axios.create({\r\n    baseURL: 'https://yacht-react-game.firebaseio.com/'\r\n})\r\n\r\nconst baseURL = \"https://yacht-react-game.firebaseio.com/winners.json\";\r\n//\r\n// axios.get('https://yacht-react-game.firebaseio.com/winner.json').then(response =>{\r\n//     console.log(response, 'works!')\r\n// })\r\n\r\nexport const winnersAPI = {\r\n    setWinner(winner) {\r\n        return axios.post(`${baseURL}`, winner)\r\n    }\r\n}","import {winnersAPI} from \"../api/api\";\r\n\r\nconst GET_WINNERS = 'GET_WINNERS';\r\nconst WRITE_WINNER = 'WRITE_WINNER';\r\n\r\n\r\nconst initialState = {\r\n    winners: [\r\n        {\r\n            name: \"Alex\", score: 238,\r\n        },\r\n        {\r\n            name: \"Santorini\", score: 118,\r\n        }\r\n    ]\r\n};\r\n\r\nconst winnersReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case GET_WINNERS: {\r\n            return {...state};\r\n        }\r\n        case WRITE_WINNER: {\r\n            return {\r\n                ...state,\r\n                winners: [\r\n                    ...state.winners,\r\n                    {\r\n                        id: action.winner.id,\r\n                        name: action.winner.name,\r\n                        score: action.winner.score\r\n                    }\r\n                ]\r\n            };\r\n\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n\r\nconst getWinners = () => {\r\n    return {\r\n        type: GET_WINNERS,\r\n    };\r\n};\r\n\r\nexport const getAllWinners = () => {\r\n    return (dispatch) => {\r\n        dispatch(getWinners);\r\n    };\r\n};\r\n\r\nconst writeWinnerOnTable = (winner) => {\r\n    return {\r\n        type: WRITE_WINNER, winner\r\n    };\r\n};\r\n\r\nexport const writeWinner = (winner) => {\r\n    return async (dispatch) => {\r\n        try {\r\n            let response = await winnersAPI.setWinner(winner)\r\n            dispatch(writeWinnerOnTable(response.config.data));\r\n            // dispatch(writeWinnerOnTable(winner));\r\n        } catch (e) {\r\n            console.log('Внимание! ', e);\r\n        }\r\n    };\r\n};\r\n\r\n\r\nexport default winnersReducer;\r\n\r\n\r\n","import React from \"react\";\r\nimport Board from \"./Board\";\r\nimport {connect} from 'react-redux'\r\nimport { compose } from \"redux\";\r\nimport {writeResult, resetPossibleValues, getTotalScore, getPossibleValue, startNewGame} from \"../../redux/boardReducer\";\r\nimport {getMakeRoll, getPickDice, newMessageAboutStep, getResetDices} from \"../../redux/dicesReducer\";\r\nimport {writeWinner} from \"../../redux/winnersReducer\";\r\n\r\nconst BoardContainer = (props) => {\r\n\r\n    return <Board\r\n        combinations={props.combinations}\r\n        dices = {props.dices}\r\n        writeResult={props.writeResult}\r\n        resetPossibleValues={props.resetPossibleValues}\r\n        getTotalScore={props.getTotalScore}\r\n        getPossibleValue={props.getPossibleValue}\r\n        getPickDice = {props.getPickDice}\r\n        getMakeRoll = {props.getMakeRoll}\r\n        newMessageAboutStep = {props.newMessageAboutStep}\r\n        getResetDices = {props.getResetDices}\r\n        startNewGame = {props.startNewGame}\r\n        writeWinner={props.writeWinner}\r\n    />;\r\n};\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        combinations: state.board.combinations,\r\n        dices: state.dices,\r\n    };\r\n};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        writeResult,\r\n        resetPossibleValues,\r\n        getTotalScore,\r\n        getPossibleValue,\r\n        getPickDice,\r\n        getMakeRoll,\r\n        newMessageAboutStep,\r\n        getResetDices,\r\n        startNewGame,\r\n        writeWinner\r\n    }),\r\n)(BoardContainer);\r\n\r\n","import React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Rules = () => {\r\n    return (\r\n        <div className=\"page\">\r\n            <h2 className=\"page-title\">\r\n                Rules\r\n            </h2>\r\n            <div className=\"page-text\">\r\n                On each turn, a player has a maximum of three rolls.\r\n                After a third roll, the player must stop rolling and proceed to scoring.\r\n                Each player will have 12 turns during the game. After each turn,\r\n                the player must enter a score in one of the rows on the score sheet\r\n            </div>\r\n            <div className=\"text-block\">\r\n                <NavLink\r\n                    to=\"/board\"\r\n                >\r\n                    <span\r\n                    className=\"btn btn-main-action\">\r\n                        Play!\r\n                    </span>\r\n                </NavLink>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Rules;","import React from \"react\";\r\nimport \"./Plans.scss\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nconst Plans = () => {\r\n    return (\r\n        <div className=\"page\">\r\n            <div>\r\n                <p className=\"page-title\"> Plans foor future of this app</p>\r\n            </div>\r\n                <span> If u want to see time of upgreding, <Link to='/about'>look here !  </Link></span>\r\n                <ul className=\"plans-list\">\r\n                    <li>Add Authentication</li>\r\n                    <Link to='/winners'>  <li className={'done'}>Done - Add data base of players with score</li> </Link>\r\n                    <li>Add dashboard with Scores of players</li>\r\n                    <li>Add multiplayer</li>\r\n                    <li> Add good design</li>\r\n                    <li>Add react-animation</li>\r\n                    <li className={'done'}> Done - Add dark theme</li>\r\n                    <li>Add Prealoder</li>\r\n                    <li>Add opportunity to change lang (rus/eng)</li>\r\n                    <li>Mobile, tablet and xs PC screen size (media)</li>\r\n                </ul>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default Plans;","import React from 'react';\r\nimport \"./Preloader.scss\";\r\n\r\n\r\nconst Prealoder = (props) => {\r\n  return (\r\n    <div className=\"preloader-container\">\r\n      {/* {props.isFetching ? <div className=\"preloader\"></div> : null} */}\r\n      <div className=\"preloader\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Prealoder;\r\n","import React, {useState} from \"react\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {getAllWinners, writeWinner} from \"../../redux/winnersReducer\";\r\n// import {AxiosInstance as axios} from \"axios\";\r\nimport axios from \"axios\";\r\nimport './winners.scss';\r\nimport Prealoder from \"../common/Preloader/Preloader\";\r\n\r\nconst Winners = () => {\r\n    const [state, setState] = useState({});\r\n    const [preloader, setPreloader] = useState(false);\r\n\r\n     const onShowWinners = async () => {\r\n            setPreloader(true);\r\n            let response =  await axios.get('https://yacht-react-game.firebaseio.com/winners.json');\r\n            setState(response.data);\r\n            setPreloader(false);\r\n     };\r\n\r\n       return (<div className=\"page\">\r\n            <h2 className=\"page-title\">Winners</h2>\r\n            <button\r\n                onClick={() => onShowWinners()}\r\n                className=\"btn btn-main-action\"\r\n            >\r\n              show winners\r\n            </button>\r\n               {preloader && <Prealoder />}\r\n            <div className=\"winners\">\r\n                {Object.keys(state).map((winner, index) =>\r\n                    <div className={'winner-item'} key={index}>\r\n                        <span className={\"winner-item-name\"}>{state[winner].name}</span>\r\n                        <span\r\n                            className={'winner-item-score'}\r\n                        >\r\n                               <div className={'value'}> {state[winner].score}</div>\r\n                            </span>\r\n\r\n                    </div>)}\r\n            </div>\r\n        </div>\r\n\r\n        );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        winners: state.winners,\r\n        isLoading: state.settings.isLoading\r\n    };\r\n};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n    getAllWinners,\r\n        writeWinner\r\n    }),\r\n)(Winners);\r\n\r\n","const CHANGE_TIME_THEME = 'CHANGE_TIME_THEME';\r\nconst SET_THEME_IN_LS = 'SET_THEME_IN_LS';\r\nconst GET_THEME_IN_LS = 'GET_THEME_IN_LS';\r\n\r\nconst initialState = {\r\n    isDark: false,\r\n    isInitialized: false,\r\n    isLoading: false,\r\n};\r\n\r\nconst settingReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case CHANGE_TIME_THEME: {\r\n            let newValue = !state.isDark;\r\n            return {...state, isDark: newValue};\r\n        }\r\n        case SET_THEME_IN_LS: {\r\n            return {\r\n                ...state, isDark: action.isDark\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst changeThemeInRedux = () => {\r\n    return {type: CHANGE_TIME_THEME};\r\n};\r\n\r\nexport const changeTheme = (isDark) => {\r\n    return (dispatch) =>  {\r\n        dispatch(changeThemeInRedux());\r\n        localStorage.setItem('isDark', !isDark);\r\n    };\r\n};\r\n\r\nexport const initialalizeApp = () => {\r\n    return (dispatch) => {\r\n        let isDarkFromLS = localStorage.getItem('isDark');\r\n        if (isDarkFromLS === 'true') {\r\n            isDarkFromLS = true;\r\n        } else {\r\n            isDarkFromLS = false;\r\n        }\r\n        dispatch(setThemeInLocalStorage(isDarkFromLS));\r\n    };\r\n};\r\n\r\nconst setThemeInLocalStorage = (isDark) => {\r\n    return {type: SET_THEME_IN_LS, isDark};\r\n};\r\n// const getThemeInLocalStorage = () => {\r\n//     return {type: GET_THEME_IN_LS};\r\n// };\r\n\r\n\r\nexport default settingReducer;\r\n","import React, {useEffect, useState} from \"react\";\r\n// import './../scss/pages/Header.scss';\r\nimport \"./Header.scss\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst Header = (props) => {\r\n    const onChangeTheme = (isDark) => {\r\n        props.changeTheme(isDark);\r\n    };\r\n\r\n    return (\r\n    <header className=\"header\">\r\n      <div className=\"header-logo\">\r\n        <div className={'main-logo'}> &nbsp;</div>\r\n      </div>\r\n        <div\r\n            className={'header-title'}\r\n        >\r\n            Yacht Game! Play now!\r\n        </div>\r\n        <div className={\"header-btn-block\"}>\r\n              <NavLink\r\n                to=\"/board\"\r\n                exact\r\n                className={'btn btn-second-action'}\r\n            >Play!</NavLink>\r\n        </div>\r\n      <div className=\"header-profile\">\r\n      </div>\r\n        <div\r\n        className=\"header-time-theme\"\r\n        >\r\n            dark mode\r\n            <input\r\n                checked={props.settings.isDark}\r\n                onChange={() => onChangeTheme(props.settings.isDark)}\r\n                type=\"checkbox\"\r\n            />\r\n        </div>\r\n\r\n      <div\r\n          className=\"header-hum-menu\"\r\n        ></div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport { connect } from \"react-redux\";\r\nimport {changeTheme} from \"../../redux/settings/settingReducer\";\r\n\r\n\r\n\r\nconst HeaderContainer =(props) => {\r\n    return (\r\n      <>\r\n        {props.isFetching ? <Preloader /> : null}\r\n        <Header\r\n            settings={props.settings}\r\n            changeTheme={props.changeTheme}\r\n        />\r\n      </>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    settings: state.settings,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, {\r\n  changeTheme\r\n})(HeaderContainer);\r\n","import React, {Suspense, useEffect} from 'react';\r\nimport './App.scss';\r\nimport {BrowserRouter, Redirect, Route, Switch} from 'react-router-dom';\r\nimport About from \"./components/About/About\";\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport BoardContainer from \"./components/Board/BoardContainer\";\r\nimport Rules from \"./components/Rules/Rules\";\r\nimport Plans from \"./components/Plans/Plans\";\r\nimport Winners from \"./components/Winners/Winners\";\r\nimport {compose} from \"redux\";\r\nimport {connect} from \"react-redux\";\r\nimport {initialalizeApp} from \"./redux/settings/settingReducer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport Prealoder from \"./components/common/Preloader/Preloader\";\r\n// BrowserRouter  basename={process.env.PUBLIC_URL} - hashRouter for dev\r\n\r\n\r\nconst App = (props) => {\r\n\r\n    useEffect(() => {\r\n        props.initialalizeApp();\r\n    }, []);\r\n\r\n\r\n  return (\r\n\r\n        <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n            <div className={\"app-wrapper \" + (props.settings.isDark ? 'theme--dark' : 'theme--default')}>\r\n                <React.Suspense fallback={<Prealoder />}>\r\n                    <HeaderContainer />\r\n                    <Navbar />\r\n                    <Switch>\r\n                        <Route path=\"/\" exact render={() =>\r\n                            <div className=\"page\"> <h1 className=\"page-title\">Dear guest</h1>\r\n                                <div className=\"page-text\">\r\n                                    Hello! My name is Maksim and i develop this app. Look more at the next pages\r\n                                </div>\r\n                            </div>}\r\n                        />\r\n                        <Route path=\"/about\" component={About}/>\r\n                        <Route path=\"/rules\" component={Rules}/>\r\n                        <Route path=\"/plans\" component={Plans}/>\r\n                        <Route path=\"/winners\" component={Winners}/>\r\n                        <Route path=\"/board/:name\" component={BoardContainer}/>\r\n                        <Route path=\"/board\" component={BoardContainer}/>\r\n                        <Redirect to={'/'}/>\r\n                        <Route component={() => (<div>404 Not found </div>)} />\r\n                    </Switch>\r\n                </React.Suspense>\r\n            </div>\r\n        </BrowserRouter>\r\n\r\n\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        settings: state.settings,\r\n    };\r\n};\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        initialalizeApp\r\n    }),\r\n)(App);\r\n\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {combineReducers} from 'redux';\r\nimport boardReducer from './boardReducer';\r\nimport dicesReducer from \"./dicesReducer\";\r\nimport winnersReducer from \"./winnersReducer\";\r\nimport settingReducer from \"./settings/settingReducer\";\r\n\r\nexport default  combineReducers({\r\n   board: boardReducer,\r\n   dices: dicesReducer,\r\n   winners: winnersReducer,\r\n   settings: settingReducer\r\n});","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {createStore, applyMiddleware, compose} from 'redux'\r\nimport {Provider} from 'react-redux'\r\n// import {reduxThunk, thunkMiddleware} from 'redux-thunk'\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport reducers from \"./redux/reducers\";\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n// const composeEnhancers =\r\n//     typeof window === 'object' &&\r\n//     window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\r\n//         window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n//         }) : compose;\r\n\r\n// const loggerMiddleware = store => next => action => {\r\n//     return next(action)\r\n// }\r\n\r\n// const store = createStore(reducers, composeEnhancers(applyMiddleware(\r\n//     loggerMiddleware,\r\n//     reduxThunk\r\n// )))\r\n\r\nconst store = createStore(reducers, composeEnhancers(   applyMiddleware(thunkMiddleware)\r\n));\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}