{"version":3,"sources":["math/math.js","components/Board/Board.jsx","redux/boardReducer.js","redux/dicesReducer.js","components/Board/BoardContainer.jsx","App.js","serviceWorker.js","redux/reducers.js","index.js"],"names":["randomInteger","min","max","rand","Math","random","round","getDiceValue","dicesValue","diceNumber","value","getDicesValues","dicesValuesAsArray","i","push","getChance","reduce","accumulator","currentValue","getSum","dicesValues","result","amount","uniq","a","sort","filter","item","pos","ary","countSumOfRepeatElemensInDices","repeatedAmount","prevValue","currValue","getSet","getYacht","getSmallStreet","getBigStreet","getFullHouse","oneAnswer","length","getBonus","combinations","getSubTotal","getTotal","getResultForCurrentCombination","currentCombinationdType","Board","props","dices","state","className","Object","keys","map","combination","index","key","name","onClick","combinationId","dicesWithValue","R","canWrite","currentRoll","canChange","resultOfCurrent","type","resultOfSubTotal","writeResult","totalValue","subTotal","bonusTotal","getTotalScore","resetPossibleValues","getResetDices","newMessageAboutStep","onWriteValue","id","possibleValue","dice","checked","diceId","getPickDice","maxRoll","messageAboutStep","dicesWithChecked","console","log","getMakeRoll","onRollingDices","initialState","TotalScore","getPossibleValue","dispatch","writePossibleValue","boardReducer","action","isChange","dicesReducer","newDicesValue","newCurrentRoll","newMessage","compose","connect","board","getWriteResult","makeTabuForChange","subTotalValue","pickDice","newValue","makeNewDiceValue","makeRoll","possibleCombinations","getResultForAllCombination","writeMessageAboutStep","App","Boolean","window","location","hostname","match","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","store","createStore","reducers","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0SAyBO,SAASA,EAAcC,EAAKC,GAE/B,IAAIC,EAAOF,EAAM,GAAMG,KAAKC,UAAYH,EAAMD,EAAM,GACpD,OAAOG,KAAKE,MAAMH,GAGf,IAsBMI,EAAe,SAACC,EAAYC,GACrC,OAAOD,EAAWC,EAAW,GAAGC,OAGvBC,EAAiB,SAACH,GAE3B,IADA,IAAMI,EAAqB,GAClBC,EAAI,EAAGA,EAAI,EAAGA,IACnBD,EAAmBE,KAAKP,EAAaC,EAAYK,IAErD,OAAOD,GAKGG,EAAY,SAACP,GAGvB,OAFoBG,EAAeH,GACRQ,QAAQ,SAACC,EAAaC,GAAd,OAA+BD,EAAcC,MAKvEC,EAAS,SAACN,EAAGL,GACtB,IAAMY,EAAcT,EAAeH,GAC7Ba,EAAWR,EAAIO,EAAYJ,QAAO,SAACM,EAAQJ,GAAT,OAA0BA,IAAiBL,IAAMS,EAASA,IAAQ,GAE1G,OAAQT,GACJ,KAAK,EAGL,KAAK,EAGL,KAAK,EAGL,KAAK,EAGL,KAAK,EAGL,KAAK,EACD,OAAOQ,EAEX,QACI,SA8BCE,EAAO,SAACC,GACjB,OAAOA,EAAEC,OAAOC,QAAO,SAAUC,EAAMC,EAAKC,GACxC,OAAQD,GAAOD,GAAQE,EAAID,EAAM,OAK5BE,EAAiC,SAACC,EAAgBvB,GAC3D,IAAIa,EAAS,EACTC,EAAS,EASb,OAR0BX,EAAeH,GAAYiB,OAEnCT,QAAO,SAACgB,EAAWC,GAIjC,OAHIA,IAAcD,EAAaV,IACxBA,EAAS,EACZA,IAAWS,IAAkBV,EAASY,EAAYF,GAC/CE,KAEJZ,GAGEa,EAAS,SAACH,EAAgBvB,GAEnC,IAAIa,EAASS,EAA+BC,EAAgBvB,GAE5D,OAAuB,IAAnBuB,GAE0B,IAAnBA,EADAV,OACJ,GAMGc,EAAW,SAACJ,EAAgBvB,GAQtC,OALoB,IAFFsB,EAA+BC,EAAgBvB,GAGnD,GAED,GAKJ4B,EAAiB,SAAC5B,GAC3B,IAAIY,EAAcT,EAAeH,GAWjC,OARAY,EAAcG,EAAKH,IAFX,KAIgBA,EAAYP,GAAS,GAAMO,EAAYP,KAAYO,EAAYP,GAAS,GAAMO,EAAYP,KAAYO,EAAYP,GAAS,EAEtI,GAEH,GAKAwB,EAAc,SAAC7B,GACzB,IAAIY,EAAcT,EAAeH,GAYjC,OARAY,EAAcG,EAAKH,IAHX,KAKgBA,EAAYP,GAAS,GAAMO,EAAYP,KAAYO,EAAYP,GAAS,GAAMO,EAAYP,KAAYO,EAAYP,GAAS,GAAMO,EAAYP,KAAYO,EAAYP,GAAS,EAEzL,GAEA,GAMHyB,EAAe,SAAC9B,GAC1B,IACIY,EAAcT,EAAeH,GAE7B+B,EAAYT,EAHK,EAG0CtB,GAC7CsB,EAA+BC,EAAkBvB,GAMnE,OALkB,IAAd+B,GAAgD,IAA7BhB,EAAKH,GAAaoB,OAC7B,GAEC,GAOJC,EAAW,SAACC,GACrB,IACIrB,EAAS,EACb,OAFasB,EAAYD,GAEb,GACRrB,EAAS,GAGNA,GAIEsB,EAAc,SAACD,GAExB,IADA,IAAIrB,EAAS,EACJR,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAExBQ,GADaqB,EAAa7B,GAAGH,MAGjC,OAAOW,GAGEuB,EAAW,SAACF,GAErB,IADA,IAAIrB,EAAS,EACJR,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAEzBQ,GADaqB,EAAa7B,GAAGH,MAIjC,OAAOW,GAgBEwB,EAAiC,SAACC,GAA4D,IAAnCtC,EAAkC,uDAArB,GAAIkC,EAAiB,uCACtG,OAAOI,GACH,IApQK,OAqQD,OAAO3B,EAAO,EAAGX,GAErB,IAtQM,QAuQF,OAAOW,EAAO,EAAGX,GAErB,IAxQO,SAyQH,OAAOW,EAAO,EAAGX,GAErB,IA1QM,QA2QF,OAAOW,EAAO,EAAGX,GAErB,IA5QM,QA6QF,OAAOW,EAAO,EAAGX,GAErB,IA7QM,QA8QF,OAAOW,EAAO,EAAGX,GAErB,IA/QU,YAgRN,OAAOmC,EAAYD,GAEvB,IAjRM,QAkRF,OAAOD,EAASC,GAEpB,IAnRgB,kBAoRZ,OAAOR,EAAO,EAAG1B,GAErB,IArRe,iBAsRX,OAAO0B,EAAO,EAAG1B,GAErB,IAtRW,aAuRP,OAAO8B,EAAa9B,GAExB,IAxRe,iBAyRX,OAAO4B,EAAe5B,GAE1B,IA1Re,iBA2RX,OAAO6B,EAAa7B,GAExB,IA5RM,QA6RF,OAAO2B,EAAS,EAAG3B,GAEvB,IA9RO,SA+RH,OAAOO,EAAUP,GAErB,IAhSY,cAiSR,OAAOoC,EAAUF,GAGrB,QACI,OAAO,I,wBCtMJK,EAxGD,SAACC,GACX,IAAIxC,EAAawC,EAAMC,MAAMzC,WACzB0C,EAAQF,EAAMC,MA8DlB,OACQ,yBAAKE,UAAU,iBACX,0CACA,yBAAKA,UAAU,eACX,yBAAKA,UAAU,eAGVC,OAAOC,KAAKL,EAAMN,cAAcY,KAAI,SAACC,EAAaC,GAAd,OAAwB,yBAAKC,IAAKD,GACnE,8BAAOR,EAAMN,aAAaa,GAAaG,MACvC,0BACIP,UAAW,qBACXQ,QAAS,kBA5ChB,SAACC,GAElB,IACIC,EAAgBC,KADH,SAACb,GAAD,OAAWA,EAAMvC,QACKsC,EAAMC,MAAMzC,YAC7CuD,EAAWD,IAAUD,GAE3B,GAAIX,EAAMc,YAAc,EACpB,GAAIhB,EAAMN,aAAakB,GAAeK,YAAcF,EAAU,CAE1D,IAAIG,EAAkBrB,EAA+BG,EAAMN,aAAakB,GAAeO,KAAMjB,EAAM1C,WAAYwC,EAAMN,cACjH0B,EAAmB,EACnBR,EAAgB,IAChBQ,EAAmBvB,EAA+BG,EAAMN,aAAakB,GAAeO,KAAMjB,EAAM1C,WAAYwC,EAAMN,eAEtHM,EAAMqB,YAAYH,EAAiBN,GACnC,IAAIU,EAAa1B,EAASI,EAAMN,cAAgBwB,EAC5CK,EAAW5B,EAAYK,EAAMN,cAAgB0B,EAC7CI,EAAa,EACbD,EAAW,KACXC,EAAa,IAEjBxB,EAAMyB,cAAcH,EAAYC,EAAUC,GAC1CxB,EAAM0B,sBACN1B,EAAM2B,qBAEE3B,EAAMN,aAAakB,GAAeK,UAEnCF,GACPf,EAAM4B,oBAAoB,8LAF1B5B,EAAM4B,oBAAoB,0IAkBKC,CAAa7B,EAAMN,aAAaa,GAAauB,MAE7D,yBAAK3B,UAAW,SAAhB,IAA2BH,EAAMN,aAAaa,GAAa7C,OAC1D,yBAAKyC,UAAW,kBAAhB,IAA+E,OAA3CH,EAAMN,aAAaa,GAAa7C,OAAmBsC,EAAMN,aAAaa,GAAawB,cAAvH,WAOZ,yBAAK5B,UAAU,UACVC,OAAOC,KAAK7C,GAAY8C,KAAI,SAAC0B,EAAMxB,GAAP,OACzB,yBAAKC,IAAKD,EACNL,UAAS,eAAU3C,EAAWwE,GAAMC,QAAU,SAAW,KACzDtB,QAAS,kBArFjBuB,EAqFkC1E,EAAWwE,GAAMF,QApFnE9B,EAAMmC,YAAYD,EAAQhC,EAAMc,YAAad,EAAMkC,QAASlC,EAAM1C,WAAW0E,GAAQD,SADtE,IAACC,IAsFM1E,EAAWwE,GAAMtE,UAItBwC,EAAMc,YAAc,EAAI,yBAAKb,UAAU,gBAAf,wCAAsCD,EAAMc,aAAsB,KAC1Fd,EAAMmC,iBAAiB7C,OAAS,EAAI,iCAAOU,EAAMmC,iBAAb,KAAwC,MAEjF,4BAAQ1B,QAAS,kBAzFV,SAACV,GACpB,IACIqC,EAAkBxB,KADJ,SAACb,GAAD,OAAWA,EAAMgC,UACOhC,GAC1Ba,IAAUwB,IAGtBtC,EAAM4B,oBAAoB,+MAC1BW,QAAQC,IAAI,YACLtC,EAAMc,YAAcd,EAAMkC,SAAWlC,EAAMc,aAAe,GAEjEhB,EAAMyC,YAAYxC,EAAOC,EAAMc,YAAahB,EAAMN,cAClDM,EAAM4B,oBAAoB,8NAGtB1B,EAAMc,YAAc,IAAMd,EAAMkC,SACpCpC,EAAM4B,oBAAoB,+OAEnB1B,EAAMc,cAAgBd,EAAMkC,SACnCpC,EAAM4B,oBAAoB,+MAuEKc,CAAexC,EAAM1C,cAA5C,Y,uDClFdmF,EAAe,CACjBjD,aAAc,CACV,EAAK,CAAEoC,GAAI,EAAGpE,MAAO,KAAMqE,cAAe,KAAOrB,KAAM,OAAQS,KApB1D,OAoBsEF,WAAW,GACtF,EAAK,CAAEa,GAAI,EAAGpE,MAAO,KAAMqE,cAAe,KAAMrB,KAAM,QAASS,KApBzD,QAoBsEF,WAAW,GACvF,EAAK,CAACa,GAAI,EAAGpE,MAAO,KAAMqE,cAAe,KAAKrB,KAAM,SAAUS,KApBvD,SAoBqEF,WAAW,GACvF,EAAK,CAACa,GAAI,EAAGpE,MAAO,KAAMqE,cAAe,KAAMrB,KAAM,QAASS,KApBxD,QAoBqEF,WAAW,GACtF,EAAK,CAACa,GAAI,EAAGpE,MAAO,KAAMqE,cAAe,KAAMrB,KAAM,QAASS,KApBxD,QAoBqEF,WAAW,GACtF,EAAK,CAACa,GAAI,EAAGpE,MAAO,KAAMqE,cAAe,KAAMrB,KAAM,QAASS,KApBzD,QAoBsEF,WAAW,GACtF,EAAK,CAACa,GAAI,EAAGpE,MAAO,KAAMqE,cAAe,KAAKrB,KAAM,QAASS,KApBvD,QAoBoEF,WAAW,GACrF,EAAK,CAACa,GAAI,EAAGpE,MAAO,KAAMqE,cAAe,KAAKrB,KAAM,kBAAmBS,KApBxD,kBAoB+EF,WAAW,GACzG,EAAI,CAACa,GAAI,EAAGpE,MAAO,KAAKqE,cAAe,KAAMrB,KAAM,iBAAkBS,KApBvD,iBAoB6EF,WAAW,GACtG,GAAM,CAACa,GAAI,GAAIpE,MAAO,KAAKqE,cAAe,KAAKrB,KAAM,aAAcS,KApBzD,aAoB2EF,WAAW,GAChG,GAAK,CAACa,GAAI,GAAIpE,MAAO,KAAMqE,cAAe,KAAMrB,KAAM,iBAAkBS,KApBzD,iBAoB+EF,WAAW,GACzG,GAAK,CAACa,GAAI,GAAIpE,MAAO,KAAMqE,cAAe,KAAKrB,KAAM,iBAAkBS,KApBzD,iBAoB+EF,WAAW,GACxG,GAAK,CAACa,GAAI,GAAIpE,MAAO,KAAKqE,cAAe,KAAMrB,KAAM,QAASS,KApBzD,QAoBsEF,WAAW,GACtF,GAAM,CAACa,GAAI,GAAIpE,MAAO,KAAMqE,cAAe,KAAKrB,KAAM,SAAUS,KApBzD,SAoBuEF,WAAW,GACzF,GAAM,CAACa,GAAI,GAAIpE,MAAO,KAAMqE,cAAe,KAAKrB,KAAM,YAAaS,KApBxD,YAoByEF,WAAW,GAC/F,GAAK,CAACa,GAAI,GAAIpE,MAAO,KAAMqE,cAAe,KAAKrB,KAAM,cAAeS,KApBzD,cAoB4EF,WAAW,KA6D7FS,EAAsB,WAC/B,MAAO,CAACP,KAtGkB,0BAkHxByB,EAAa,SAACtB,EAAYQ,GAC5B,MAAO,CAACX,KAlHY,kBAkHWG,aAAYQ,OAclCe,EAAmB,SAACnD,GAC7B,OAAO,SAACoD,GAEJA,EA9BG,CAAC3B,KAtGkB,0BAqItB2B,EArCmB,SAACpD,GACxB,MAAO,CAACyB,KA9FiB,uBA8FWzB,gBAoCvBqD,CAAmBrD,MAOrBsD,EA9FM,WAAmC,IAAlC9C,EAAiC,uDAAzByC,EAAcM,EAAW,uCAEnD,OAAOA,EAAO9B,MAEV,IAnDa,eAoDT,OAAIjB,EAAMR,aAAauD,EAAOrC,eAAeK,UAClCH,IACH,CAAC,eAAgBmC,EAAOrC,cAAe,SACvCqC,EAAO5E,OACP6B,GAGD,eAAIA,GAEf,IA3DgB,kBA4DZ,OAAOY,IACH,CAAC,eAAgBmC,EAAOnB,GAAK,SAC7BmB,EAAO3B,WACPpB,GAGR,IAjEqB,uBAkEjB,OAAOY,IACH,CAAC,eAAgBmC,EAAOrC,cAAe,aACvCqC,EAAOC,SACPhD,GAGR,IAvEqB,uBAwEjB,OAAO,eACAA,EADP,CAEIR,aAAcuD,EAAOvD,eAG7B,IAhFsB,wBAiFlB,OAAOoB,IACHA,IAAW,gBACXA,IAAMA,IAAQ,gBAAiB,OAC/BZ,GAGR,QACI,OAAOA,ICjFbyC,EAAe,CACjBnF,WAAY,CACR,EAAI,CAAEsE,GAAI,EAAGpE,MAAO,KAAMuE,SAAS,GACnC,EAAI,CAACH,GAAI,EAAGpE,MAAO,KAAMuE,SAAS,GAClC,EAAI,CAACH,GAAI,EAAGpE,MAAO,KAAKuE,SAAS,GACjC,EAAI,CAACH,GAAI,EAAGpE,MAAO,KAAKuE,SAAS,GACjC,EAAI,CAACH,GAAI,EAAGpE,MAAO,KAAMuE,SAAS,IAEtCjB,YAAa,EACboB,QAAS,EACTC,iBAAkB,6EAqHPc,EAjHM,WAAmC,IAAlCjD,EAAiC,uDAAzByC,EAAcM,EAAW,uCACnD,OAAOA,EAAO9B,MACV,IAvBU,YAwBN,OAAO,eACAjB,EADP,CAEI1C,WAAYyF,EAAOG,cACnBpC,YAAaiC,EAAOI,iBAG5B,IA7BU,YA+BN,OAAOvC,IACH,CAAC,aAAcmC,EAAOf,OAAQ,WAC9Be,EAAOhB,QACP/B,GAGR,IApCuB,yBAqCnB,OAAO,eACAA,EADP,CAEImC,iBAAkBY,EAAOK,aAGjC,IAzCY,cA0CR,OAAOxC,IACHA,IAAW,cACXA,IAAMA,IAAQ,QAAS,OACvBZ,GAGR,IA9CuB,yBA+CnB,OAAOY,IACHA,IAAW,cACXA,IAAMA,IAAQ,WAAW,IACzBZ,GAGR,IAtDmB,qBAuDf,OAAO,eACAA,EADP,CAEIc,YAAa,IAGrB,QACI,OAAOd,ICtCJqD,YACXC,aARoB,SAACtD,GACrB,MAAO,CACHR,aAAcQ,EAAMuD,MAAM/D,aAC1BO,MAAOC,EAAMD,SAKQ,CACrBoB,YF+EmB,SAAChD,EAAQuC,GAChC,OAAO,SAACkC,GACJA,EAlBe,SAACzE,EAAQuC,GAC5B,MAAO,CAACO,KA9FS,eA8FW9C,SAAQuC,iBAiBvB8C,CAAerF,EAAQuC,IAChCkC,EANkB,SAAClC,EAAesC,GACtC,MAAO,CAAC/B,KAxGiB,uBAwGWP,gBAAesC,YAKtCS,CAAkB/C,GAAe,MEjF1Cc,sBACAD,cFuFqB,SAACH,EAAYsC,EAAepC,GAErD,OAAO,SAACsB,GACJA,EAASF,EAAWgB,EAAe,KACnCd,EAASF,EAAWtB,EAAY,KAChCwB,EAASF,EAAWpB,EAAY,ME3FhCqB,mBACAV,YDuCmB,SAACD,EAAQlB,EAAaoB,EAASH,GACtD,OAAO,SAACa,GACA9B,EAAcoB,GAAWpB,EAAc,GACvC8B,EANK,SAACZ,EAAQD,GACtB,MAAO,CAACd,KArEM,YAqEWe,SAAQD,WAKhB4B,CAAS3B,GAASD,MCzC/BQ,YD2FmB,SAACjF,EAAYwD,EAAatB,GACjD,OAAO,SAACoD,GACH,IAAIM,EHrGmB,SAAC5F,GAG7B,IAFA,IACIsG,EADAV,EAAgB5F,EAEXK,EAAI,EAAGA,EAAI,EAAGA,IACnBiG,EAAW9G,EAAc,EAAG,GAExBoG,EADAA,EAAcvF,GAAGoE,QACDnB,IACZ,CAACjD,EAAG,SACJiG,EACAV,GAGYtC,IACZ,CAACjD,EAAG,SACJuF,EAAcvF,GAAGH,MACjB0F,GAIZ,OAAOA,EGkFkBW,CAAiBvG,GAErCsF,ED3BE,CAAC3B,KAtGkB,0BCkIrB2B,EAlDQ,SAACM,EAAeC,GAC7B,MAAO,CACHlC,KAlFU,YAkFMiC,gBAAcC,kBAgDpBW,CAASZ,EAAepC,EAAa,IAC/C8B,EAASD,EHuLyB,WAItC,IAJ0E,IAAnCrF,EAAkC,uDAArB,GAAIkC,EAAiB,uCAErEuE,EAAuBvE,EAElB7B,EAAG,EAAGA,EAAG,GAAIA,IAClB,GAAIoG,EAAqBpG,GAAGoD,UAAW,CACnC,IAAI5C,EAAS,KAEb,OAAOR,GACH,KAAK,EACDQ,EAAQF,EAAO,EAAGX,GAClB,MAGJ,KAAK,EACAa,EAASF,EAAO,EAAGX,GACpB,MAEJ,KAAK,EACAa,EAASF,EAAO,EAAGX,GACpB,MAEJ,KAAK,EACAa,EAASF,EAAO,EAAGX,GACpB,MAEJ,KAAK,EACAa,EAASF,EAAO,EAAGX,GACpB,MAEJ,KAAK,EACAa,EAAUF,EAAO,EAAGX,GACrB,MAEJ,KAAK,EACAa,EAASa,EAAO,EAAG1B,GACpB,MAEJ,KAAK,EACAa,EAASa,EAAO,EAAG1B,GACpB,MAEJ,KAAK,GACAa,EAASiB,EAAa9B,GACvB,MAEJ,KAAK,GACAa,EAASe,EAAe5B,GACzB,MAEJ,KAAK,GACAa,EAASgB,EAAa7B,GACvB,MAEJ,KAAK,GACAa,EAASc,EAAS,EAAG3B,GACtB,MAEJ,KAAK,GACAa,EAASN,EAAUP,GACpB,MAEJ,QACKa,EAAS,EAElB4F,EAAuBnD,IACnB,CAACjD,EAAG,iBACJQ,EACA4F,OAGD,CACH,IAAI5F,EAAS,EACb4F,EAAsBnD,IAClB,CAACjD,EAAG,iBACJQ,EACA4F,GAKZ,OAAOA,EGxQuBC,CAA2Bd,EAAe1D,OChGpEkC,oBDwD2B,SAAC0B,GAChC,OAAO,SAACR,GACJA,EARsB,SAACQ,GAC3B,MAAO,CACHnC,KArFuB,yBAqFOmC,cAMrBa,CAAsBb,MCzD/B3B,cDgFqB,WACzB,OAAO,SAACmB,GACJA,EApBG,CACH3B,KAhGY,gBAoHZ2B,EARG,CACH3B,KA5GmB,uBAoHnB2B,EAhBG,CACH3B,KApGuB,+BCsBhBoC,EAzBQ,SAACvD,GAEpB,OAAO,kBAAC,EAAD,CACHN,aAAcM,EAAMN,aACpBO,MAASD,EAAMC,MACfoB,YAAarB,EAAMqB,YACnBK,oBAAqB1B,EAAM0B,oBAC3BD,cAAezB,EAAMyB,cACrBoB,iBAAkB7C,EAAM6C,iBACxBV,YAAenC,EAAMmC,YACrBM,YAAezC,EAAMyC,YACrBb,oBAAuB5B,EAAM4B,oBAC7BD,cAAiB3B,EAAM2B,mBCUhByC,MAtBf,aCKoBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCbUC,cAAgB,CAC7BjB,MAAOT,EACP/C,MAAOkD,ICIJwB,EAAmBL,OAAOM,sCAAwCrB,IAgBlEsB,EAAQC,YAAYC,EAAUJ,EAAoBK,YAAgBC,OAKxEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACM,kBAAC,IAAD,CAAUP,MAAOA,GACb,kBAAC,EAAD,QAGVQ,SAASC,eAAe,SF6FpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvD,QAAQuD,MAAMA,EAAMC,c","file":"static/js/main.77321dc4.chunk.js","sourcesContent":["import * as R from 'ramda'\r\n\r\n// random from MIN to MAX //\r\n\r\n\r\nconst ONES = 'ONES';\r\nconst TWOES = 'TWOES';\r\nconst THREES = 'THREES';\r\nconst FOURS = 'FOURS';\r\nconst FIVES = 'FIVES';\r\n\r\nconst SIXES = 'SIXES';\r\nconst SUB_TOTAL = 'SUB_TOTAL';\r\nconst BONUS = 'BONUS';\r\nconst THREE_OF_A_KIND = 'THREE_OF_A_KIND';\r\nconst FOUR_OF_A_KIND = 'FOUR_OF_A_KIND';\r\n\r\nconst FULL_HOUSE = 'FULL_HOUSE';\r\nconst SMALL_STRAIGHT = 'SMALL_STRAIGHT';\r\nconst LARGE_STRAIGHT = 'LARGE_STRAIGHT';\r\nconst YACHT = 'YACHT';\r\nconst CHANCE = 'CHANCE';\r\nconst TOTAL_SCORE = 'TOTAL_SCORE';\r\n\r\n\r\nexport function randomInteger(min, max) {\r\n    // получить случайное число от (min-0.5) до (max+0.5)\r\n    let rand = min - 0.5 + Math.random() * (max - min + 1);\r\n    return Math.round(rand);\r\n}\r\n\r\nexport const makeNewDiceValue = (dicesValue) => {\r\n    let newDicesValue = dicesValue;\r\n    let newValue;\r\n    for (let i = 1; i < 6; i++) {\r\n        newValue = randomInteger(1, 6);\r\n        if (newDicesValue[i].checked) {\r\n            newDicesValue = R.assocPath(\r\n                [i, 'value'],\r\n                newValue,\r\n                newDicesValue\r\n            );\r\n        } else {\r\n            newDicesValue = R.assocPath(\r\n                [i, 'value'],\r\n                newDicesValue[i].value,\r\n                newDicesValue\r\n            );\r\n        }\r\n    }\r\n    return newDicesValue;\r\n}\r\n\r\nexport const getDiceValue = (dicesValue, diceNumber) => {\r\n    return dicesValue[diceNumber+1].value\r\n}\r\n\r\nexport const getDicesValues = (dicesValue) => {\r\n    const dicesValuesAsArray = [];\r\n    for (let i = 0; i < 5; i++) {\r\n        dicesValuesAsArray.push(getDiceValue(dicesValue, i));\r\n    }\r\n    return dicesValuesAsArray;\r\n}\r\n\r\n\r\n// считает и пишет шанс\r\nexport const  getChance = (dicesValue) => {\r\n    const dicesValues = getDicesValues(dicesValue);\r\n    const result = dicesValues.reduce(((accumulator, currentValue) => accumulator + currentValue));\r\n    return result\r\n}\r\n\r\n// считает суммы\r\nexport const getSum = (i, dicesValue) => {\r\n    const dicesValues = getDicesValues(dicesValue);\r\n    const result =  (i * dicesValues.reduce((amount, currentValue) => currentValue === i ? ++amount : amount, 0));\r\n    let type;\r\n    switch (i) {\r\n        case 1: {\r\n            return result\r\n        }\r\n        case 2: {\r\n            return result\r\n        }\r\n        case 3: {\r\n            return result\r\n        }\r\n        case 4: {\r\n            return result\r\n        }\r\n        case 5: {\r\n            return result\r\n        }\r\n        case 6: {\r\n            return result\r\n        }\r\n        default:\r\n            return;\r\n    }\r\n\r\n}\r\n\r\n// сортировка по порядку\r\nexport const compareNumeric = (a, b) => {\r\n    return a - b;\r\n}\r\n\r\n// оставляет только уникальные значения\r\nexport const unique = (arr) => {\r\n    let obj = {};\r\n\r\n    for (let i = 0; i < arr.length; i++) {\r\n        let str = arr[i];\r\n        obj[str] = true; // запомнить строку в виде свойства объекта\r\n    }\r\n    return Object.keys(obj); // или собрать ключи перебором для IE8-\r\n}\r\n\r\nexport const uniqueArray = (arr) => {\r\n    let arrayCopy = [];\r\n    for (let key in arr) {\r\n        if (arr[key].includes) { }\r\n    }\r\n}\r\n\r\n\r\n// функция сортирует и удаляет повторяющие элементы\r\nexport const uniq = (a) => {\r\n    return a.sort().filter(function (item, pos, ary) {\r\n        return !pos || item != ary[pos - 1];\r\n    })\r\n}\r\n// summ повтор элементов\r\n\r\nexport const countSumOfRepeatElemensInDices = (repeatedAmount, dicesValue) => {\r\n    let result = 0;\r\n    let amount = 1;\r\n    const dicesValueAsArray = getDicesValues(dicesValue).sort();\r\n\r\n    dicesValueAsArray.reduce((prevValue, currValue) => {\r\n        if (currValue === prevValue) { amount++; }\r\n        else { amount = 1; }\r\n        if (amount === repeatedAmount) { result = currValue * repeatedAmount; }\r\n        return currValue;\r\n    });\r\n    return result\r\n}\r\n\r\nexport const getSet = (repeatedAmount, dicesValue) => {\r\n\r\n    let result = countSumOfRepeatElemensInDices(repeatedAmount, dicesValue)\r\n\r\n    if (repeatedAmount === 3) {\r\n        return result\r\n    } else if (repeatedAmount === 4) {\r\n        return result\r\n    }\r\n\r\n}\r\n\r\nexport const  getYacht = (repeatedAmount, dicesValue) => {\r\n    let yachtAnswer = countSumOfRepeatElemensInDices(repeatedAmount, dicesValue);\r\n    let result;\r\n    if (yachtAnswer !== 0) {\r\n         result = 50;\r\n    } else {\r\n        result = 0;\r\n    }\r\n    return result\r\n}\r\n\r\nexport const getSmallStreet = (dicesValue) => {\r\n    let dicesValues = getDicesValues(dicesValue);\r\n    let i = 0; // для 1 2 3 4\r\n    let result;\r\n    dicesValues = uniq(dicesValues);\r\n\r\n    if (dicesValues[i] === (dicesValues[i + 1] - 1) && dicesValues[i + 1] === (dicesValues[i + 2] - 1) && dicesValues[i + 2] === (dicesValues[i + 3] - 1)) {\r\n        // console.log(dicesValues + 'стрит 1-4');\r\n        result = 25;\r\n    } else {\r\n     result = 0;\r\n    }\r\n    return result\r\n}\r\n\r\nexport const  getBigStreet =(dicesValue)  => {\r\n    let dicesValues = getDicesValues(dicesValue);\r\n    let i = 0; // для 1 2 3 4\r\n    let result;\r\n\r\n    dicesValues = uniq(dicesValues);\r\n\r\n    if (dicesValues[i] === (dicesValues[i + 1] - 1) && dicesValues[i + 1] === (dicesValues[i + 2] - 1) && dicesValues[i + 2] === (dicesValues[i + 3] - 1) && dicesValues[i + 3] === (dicesValues[i + 4] - 1)) {\r\n        // console.log(cubesValues + 'стрит 1-5');\r\n        result = 30;\r\n    } else {\r\n        result = 0;\r\n    }\r\n    return result\r\n}\r\n\r\n\r\nexport const  getFullHouse = (dicesValue) => {\r\n    let repeatedAmount = 4;\r\n    let dicesValues = getDicesValues(dicesValue);\r\n    let result;\r\n    let oneAnswer = countSumOfRepeatElemensInDices(repeatedAmount, dicesValue); // проверим, есть ли сет в массиве костей\r\n    let dubleAnswer = countSumOfRepeatElemensInDices(repeatedAmount-1, dicesValue);\r\n    if (oneAnswer === 0 && uniq(dicesValues).length === 2) {\r\n        result= 40;\r\n    } else {\r\n        result = 0;\r\n    }\r\n    return result\r\n}\r\n\r\n\r\n\r\nexport const getBonus = (combinations) =>{\r\n    let answer = getSubTotal(combinations)\r\n    let result = 0;\r\n    if (answer >62) {\r\n        result = 35;\r\n        return result\r\n    }\r\n    return result\r\n\r\n}\r\n\r\nexport const getSubTotal = (combinations) => {\r\n    let result = 0;\r\n    for (let i = 1; i < 7; i++) {\r\n        let answer = combinations[i].value;\r\n        result = result + answer;\r\n    }\r\n    return result\r\n}\r\n\r\nexport const getTotal = (combinations) =>{\r\n    let result = 0;\r\n    for (let i = 1; i < 15; i++) {\r\n        let answer = combinations[i].value\r\n        result = result + answer;\r\n    }\r\n\r\n    return result\r\n}\r\n\r\n\r\n\r\n// функция проверяет на число и если число, то возвращает 0\r\nexport const noNan = (el) => {\r\n    if (Number.isNaN(el) === false) {\r\n        return el;\r\n    } else {\r\n        return el = 0;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const getResultForCurrentCombination = (currentCombinationdType, dicesValue = {}, combinations) => {\r\n    switch(currentCombinationdType) {\r\n        case ONES: {\r\n            return getSum(1, dicesValue)\r\n        }\r\n        case TWOES: {\r\n            return getSum(2, dicesValue)\r\n        }\r\n        case THREES: {\r\n            return getSum(3, dicesValue)\r\n        }\r\n        case FOURS: {\r\n            return getSum(4, dicesValue)\r\n        }\r\n        case FIVES: {\r\n            return getSum(5, dicesValue)\r\n        }\r\n        case SIXES: {\r\n            return getSum(6, dicesValue)\r\n        }\r\n        case SUB_TOTAL: {\r\n            return getSubTotal(combinations)\r\n        }\r\n        case BONUS: {\r\n            return getBonus(combinations)\r\n        }\r\n        case THREE_OF_A_KIND: {\r\n            return getSet(3, dicesValue)\r\n        }\r\n        case FOUR_OF_A_KIND: {\r\n            return getSet(4, dicesValue)\r\n        }\r\n        case FULL_HOUSE: {\r\n            return getFullHouse(dicesValue)\r\n        }\r\n        case SMALL_STRAIGHT: {\r\n            return getSmallStreet(dicesValue)\r\n        }\r\n        case LARGE_STRAIGHT: {\r\n            return getBigStreet(dicesValue)\r\n        }\r\n        case YACHT: {\r\n            return getYacht(5, dicesValue)\r\n        }\r\n        case CHANCE: {\r\n            return getChance(dicesValue)\r\n        }\r\n        case TOTAL_SCORE: {\r\n            return getTotal( combinations)\r\n        }\r\n\r\n        default:\r\n            return 0;\r\n    }\r\n}\r\n\r\nexport const getResultForAllCombination = (dicesValue = {}, combinations) => {\r\n\r\n    let possibleCombinations = combinations;\r\n    // debugger\r\n    for (let i =1; i <17; i++) {\r\n        if (possibleCombinations[i].canChange) {\r\n            let result = null\r\n\r\n            switch(i) {\r\n                case 1: {\r\n                    result= getSum(1, dicesValue)\r\n                    break;\r\n\r\n                }\r\n                case 2: {\r\n                     result = getSum(2, dicesValue)\r\n                    break\r\n                }\r\n                case 3: {\r\n                     result = getSum(3, dicesValue)\r\n                    break\r\n                }\r\n                case 4: {\r\n                     result = getSum(4, dicesValue)\r\n                    break\r\n                }\r\n                case 5: {\r\n                     result = getSum(5, dicesValue)\r\n                    break\r\n                }\r\n                case 6: {\r\n                     result =  getSum(6, dicesValue)\r\n                    break\r\n                }\r\n                case 8: {\r\n                     result = getSet(3, dicesValue)\r\n                    break\r\n                }\r\n                case 9: {\r\n                     result = getSet(4, dicesValue)\r\n                    break\r\n                }\r\n                case 10: {\r\n                     result = getFullHouse(dicesValue)\r\n                    break\r\n                }\r\n                case 11: {\r\n                     result = getSmallStreet(dicesValue)\r\n                    break\r\n                }\r\n                case 12: {\r\n                     result = getBigStreet(dicesValue)\r\n                    break\r\n                }\r\n                case 13: {\r\n                     result = getYacht(5, dicesValue)\r\n                    break\r\n                }\r\n                case 14: {\r\n                     result = getChance(dicesValue)\r\n                    break\r\n                }\r\n                default:\r\n                     result = 0;\r\n            }\r\n            possibleCombinations = R.assocPath(\r\n                [i, 'possibleValue'],\r\n                result,\r\n                possibleCombinations\r\n            );\r\n\r\n        } else {\r\n            let result = 0;\r\n            possibleCombinations =R.assocPath(\r\n                [i, 'possibleValue'],\r\n                result,\r\n                possibleCombinations\r\n            );\r\n        }\r\n    }\r\n\r\n    return possibleCombinations;\r\n\r\n}\r\n\r\n","import React, {useState} from \"react\";\r\nimport {\r\n    getResultForAllCombination, getResultForCurrentCombination,\r\n    getSubTotal,\r\n    getTotal,\r\n    randomInteger\r\n} from \"../../math/math\";\r\nimport './Board.scss';\r\nimport * as R from \"ramda\";\r\n\r\n\r\n\r\n\r\nconst Board = (props) => {\r\n    let dicesValue = props.dices.dicesValue;\r\n    let state = props.dices;\r\n\r\n    const onPickDice = (diceId) => {\r\n        props.getPickDice(diceId, state.currentRoll, state.maxRoll, state.dicesValue[diceId].checked);\r\n    }\r\n\r\n    const onRollingDices = (dices) => {\r\n        const isChecked = (dices) => dices.checked\r\n        let dicesWithChecked =R.filter(isChecked, dices);\r\n        const canRoll = R.isEmpty(dicesWithChecked);\r\n\r\n        if (canRoll) {\r\n            props.newMessageAboutStep('Выберите кости или запишите результат!')\r\n            console.log('canRoll')\r\n        } else if (state.currentRoll < state.maxRoll && state.currentRoll >= 0) {\r\n            // props.resetPossibleValues();\r\n            props.getMakeRoll(dices, state.currentRoll, props.combinations);\r\n            props.newMessageAboutStep('Хороший бросок. Запишем или кидаем дальше?!')\r\n            // props.getPossibleValue(getResultForAllCombination(state.dicesValue, props.combinations));\r\n\r\n            if (state.currentRoll + 1 === state.maxRoll) {\r\n            props.newMessageAboutStep('Это был последний бросок, запишите результат')\r\n            }\r\n        } else if (state.currentRoll === state.maxRoll) {\r\n            props.newMessageAboutStep('Бросков больше нет, запишите результат');\r\n        }\r\n    }\r\n\r\n\r\n    const onWriteValue = (combinationId) => {\r\n\r\n        const hasValue = (dices) => dices.value\r\n        let dicesWithValue =R.filter(hasValue, props.dices.dicesValue);\r\n        const canWrite = R.isEmpty(dicesWithValue);\r\n\r\n        if (state.currentRoll > 0) {\r\n            if (props.combinations[combinationId].canChange && !canWrite) {\r\n\r\n                let resultOfCurrent = getResultForCurrentCombination(props.combinations[combinationId].type, state.dicesValue, props.combinations);\r\n                let resultOfSubTotal = 0;\r\n                if (combinationId < 7) {\r\n                    resultOfSubTotal = getResultForCurrentCombination(props.combinations[combinationId].type, state.dicesValue, props.combinations);\r\n                }\r\n                props.writeResult(resultOfCurrent, combinationId);\r\n                let totalValue = getTotal(props.combinations) + resultOfCurrent;\r\n                let subTotal = getSubTotal(props.combinations) + resultOfSubTotal;\r\n                let bonusTotal = 0;\r\n                if (subTotal > 62) {\r\n                    bonusTotal = 35;\r\n                }\r\n                props.getTotalScore(totalValue, subTotal, bonusTotal);\r\n                props.resetPossibleValues();\r\n                props.getResetDices();\r\n\r\n            } else if (!props.combinations[combinationId].canChange) {\r\n                props.newMessageAboutStep('Выберите другое значение');\r\n            } else if (canWrite) {\r\n                props.newMessageAboutStep('Новый ход! Кидайте кости пожалуйста!');\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n            <div className=\"board-wrapper\">\r\n                <h2>Board game</h2>\r\n                <div className=\"board-table\">\r\n                    <div className=\"combination\">\r\n\r\n\r\n                        {Object.keys(props.combinations).map((combination, index) => <div key={index}>\r\n                            <span>{props.combinations[combination].name}</span>\r\n                            <span\r\n                                className={'combination-result'}\r\n                                onClick={() => onWriteValue(props.combinations[combination].id)}\r\n                            >\r\n                               <div className={'value'}> {props.combinations[combination].value}</div>\r\n                                <div className={'possible-value'}> {props.combinations[combination].value  === null && props.combinations[combination].possibleValue} </div>\r\n                            </span>\r\n\r\n                        </div>)}\r\n\r\n                    </div>\r\n\r\n                    <div className=\"result\" >\r\n                        {Object.keys(dicesValue).map((dice, index) =>\r\n                            <div key={index}\r\n                                className={`dice ${dicesValue[dice].checked ? 'active' : ' '}`}\r\n                                onClick={() => onPickDice(dicesValue[dice].id)}\r\n                            >{dicesValue[dice].value}\r\n                            </div>\r\n                        )}\r\n\r\n                        {state.currentRoll > 0 ? <div className=\"result-block\">бросок {state.currentRoll }</div> : null}\r\n                        {state.messageAboutStep.length > 0 ? <div> {state.messageAboutStep} </div> : null}\r\n                    </div>\r\n                    <button onClick={() => onRollingDices(state.dicesValue)}>ROLL!</button>\r\n\r\n                </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Board;","import * as R from 'ramda'\r\nimport {getResultForCurrentCombination, getTotal} from \"../math/math\";\r\nimport {dissocPath} from \"ramda\";\r\n\r\nconst WRITE_RESULT = 'WRITE_RESULT'\r\nconst RESET_POSSIBLE_VALUES = 'RESET_POSSIBLE_VALUES';\r\nconst GET_TOTAL_SCORE = 'GET_TOTAL_SCORE';\r\nconst MAKE_TABU_FOR_CHANGE = 'MAKE_TABU_FOR_CHANGE';\r\nconst WRITE_POSSIBLE_VALUE = 'WRITE_POSSIBLE_VALUE';\r\n\r\nconst ONES = 'ONES';\r\nconst TWOES = 'TWOES';\r\nconst THREES = 'THREES';\r\nconst FOURS = 'FOURS';\r\nconst FIVES = 'FIVES';\r\nconst SIXES= 'SIXES';\r\nconst BONUS = 'BONUS';\r\nconst THREE_OF_A_KIND= 'THREE_OF_A_KIND';\r\nconst FOUR_OF_A_KIND= 'FOUR_OF_A_KIND';\r\nconst FULL_HOUSE= 'FULL_HOUSE';\r\nconst SMALL_STRAIGHT = 'SMALL_STRAIGHT';\r\nconst LARGE_STRAIGHT= 'LARGE_STRAIGHT';\r\nconst YACHT= 'YACHT';\r\nconst CHANCE = 'CHANCE';\r\n const SUB_TOTAL = 'SUB_TOTAL';\r\nconst TOTAL_SCORE= 'TOTAL_SCORE';\r\n\r\n\r\nconst initialState = {\r\n    combinations: {\r\n        '1': { id: 1, value: null, possibleValue: null,  name: 'Ones', type: ONES, canChange: true},\r\n        '2': { id: 2, value: null, possibleValue: null, name: 'Twoes', type: TWOES, canChange: true},\r\n        '3': {id: 3, value: null, possibleValue: null,name: 'Threes', type: THREES, canChange: true},\r\n        '4': {id: 4, value: null, possibleValue: null, name: 'fours', type: FOURS, canChange: true},\r\n        '5': {id: 5, value: null, possibleValue: null, name: 'fours', type: FIVES, canChange: true},\r\n        '6': {id: 6, value: null, possibleValue: null, name: 'Sixes', type: SIXES, canChange: true},\r\n        '7': {id: 7, value: null, possibleValue: null,name: 'Bonus', type: BONUS, canChange: false},\r\n        '8': {id: 8, value: null, possibleValue: null,name: 'Three of a kind', type: THREE_OF_A_KIND, canChange: true},\r\n        '9':{id: 9, value: null,possibleValue: null, name: 'Four of a kind', type: FOUR_OF_A_KIND, canChange: true},\r\n        '10': {id: 10, value: null,possibleValue: null,name: 'Full house', type: FULL_HOUSE, canChange: true},\r\n        '11':{id: 11, value: null, possibleValue: null, name: 'Small Straight', type: SMALL_STRAIGHT, canChange: true},\r\n        '12':{id: 12, value: null, possibleValue: null,name: 'Large Straight', type: LARGE_STRAIGHT, canChange: true},\r\n        '13':{id: 13, value: null,possibleValue: null, name: 'Yacht', type: YACHT, canChange: true},\r\n        '14': {id: 14, value: null, possibleValue: null,name: 'Chance', type: CHANCE, canChange: true},\r\n        '15': {id: 15, value: null, possibleValue: null,name: 'Sub Total', type: SUB_TOTAL, canChange: false},\r\n        '16':{id: 16, value: null, possibleValue: null,name: 'Total Score', type: TOTAL_SCORE, canChange: false},\r\n    }\r\n\r\n\r\n}\r\n\r\nconst boardReducer = (state = initialState, action) => {\r\n\r\n    switch(action.type) {\r\n\r\n        case WRITE_RESULT:\r\n            if (state.combinations[action.combinationId].canChange) {\r\n                return R.assocPath(\r\n                    ['combinations', action.combinationId, 'value'],\r\n                    action.result,\r\n                    state\r\n                );\r\n            }\r\n            return {...state}\r\n            // message\r\n        case GET_TOTAL_SCORE: {\r\n            return R.assocPath(\r\n                ['combinations', action.id,  'value'],\r\n                action.totalValue,\r\n                state\r\n            );\r\n        }\r\n        case MAKE_TABU_FOR_CHANGE: {\r\n            return R.assocPath(\r\n                ['combinations', action.combinationId, 'canChange'],\r\n                action.isChange,\r\n                state\r\n            );\r\n        }\r\n        case WRITE_POSSIBLE_VALUE: {\r\n            return {\r\n                ...state,\r\n                combinations: action.combinations\r\n            }\r\n        }\r\n        case RESET_POSSIBLE_VALUES: {\r\n            return R.over(\r\n                R.lensProp('combinations'),\r\n                R.map(R.assoc('possibleValue', null)),\r\n                state\r\n            );\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst getWriteResult = (result, combinationId) => {\r\n    return {type: WRITE_RESULT, result, combinationId};\r\n}\r\n\r\nconst writePossibleValue = (combinations) => {\r\n    return {type: WRITE_POSSIBLE_VALUE, combinations}\r\n}\r\n\r\n\r\nexport const resetPossibleValues = () => {\r\n    return {type: RESET_POSSIBLE_VALUES}\r\n}\r\n\r\nconst makeTabuForChange = (combinationId, isChange) => {\r\n    return {type: MAKE_TABU_FOR_CHANGE, combinationId, isChange}\r\n}\r\nexport const writeResult = (result, combinationId) => {\r\n    return (dispatch) => {\r\n        dispatch(getWriteResult(result, combinationId));\r\n        dispatch(makeTabuForChange(combinationId, false));\r\n    }\r\n}\r\nconst TotalScore = (totalValue, id) => {\r\n    return {type: GET_TOTAL_SCORE, totalValue, id}\r\n}\r\n\r\nexport const getTotalScore = (totalValue, subTotalValue, bonusTotal) => {\r\n\r\n    return (dispatch) => {\r\n        dispatch(TotalScore(subTotalValue, 15));\r\n        dispatch(TotalScore(totalValue, 16));\r\n        dispatch(TotalScore(bonusTotal, 7));\r\n    }\r\n\r\n}\r\n\r\n\r\nexport const getPossibleValue = (combinations) => {\r\n    return (dispatch) => {\r\n        // debugger\r\n        dispatch(resetPossibleValues());\r\n        dispatch(writePossibleValue(combinations))\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default boardReducer;\r\n\r\n\r\n\r\n\r\n\r\n// old writeresult as array\r\n// return {\r\n//     ...state,\r\n//     combinations: state.combinations.map((combination) => {\r\n//       if (combination.id - 1 === action.combinationId) {\r\n//         return { ...combination, value: action.result };\r\n//       }\r\n//       return combination;\r\n//     }),\r\n// }","import * as R from 'ramda'\r\nimport {getResultForAllCombination, makeNewDiceValue} from './../math/math'\r\nimport {getPossibleValue, resetPossibleValues} from \"./boardReducer\";\r\n\r\n\r\nconst MAKE_ROLL = 'MAKE_ROLL';\r\nconst PICK_DICE = 'PICK_DICE';\r\nconst NEW_MESSAGE_ABOUT_STEP = 'NEW_MESSAGE_ABOUT_STEP'\r\nconst RESET_DICES = 'RESET_DICES';\r\nconst RESET_CURRENT_ROLL = 'RESET_CURRENT_ROLL';\r\nconst MAKE_ALL_DICES_CHECKED = 'MAKE_ALL_DICES_CHECKED'\r\n\r\nconst initialState = {\r\n    dicesValue: {\r\n        '1':{ id: 1, value: null, checked: true},\r\n        '2':{id: 2, value: null, checked: true},\r\n        '3':{id: 3, value: null,checked: true},\r\n        '4':{id: 4, value: null,checked: true},\r\n        '5':{id: 5, value: null, checked: true}\r\n    },\r\n    currentRoll: 0,\r\n    maxRoll: 3,\r\n    messageAboutStep: 'Кидайте кости',\r\n}\r\n\r\n\r\nconst dicesReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case MAKE_ROLL: {\r\n            return {\r\n                ...state,\r\n                dicesValue: action.newDicesValue,\r\n                currentRoll: action.newCurrentRoll\r\n            }\r\n        }\r\n        case PICK_DICE: {\r\n            // let checked = !state.dicesValue[action.diceId].checked;\r\n            return R.assocPath(\r\n                ['dicesValue', action.diceId, 'checked'],\r\n                action.checked,\r\n                state\r\n            );\r\n        }\r\n        case NEW_MESSAGE_ABOUT_STEP: {\r\n            return {\r\n                ...state,\r\n                messageAboutStep: action.newMessage\r\n            }\r\n        }\r\n        case RESET_DICES: {\r\n            return R.over(\r\n                R.lensProp('dicesValue'),\r\n                R.map(R.assoc('value', null)),\r\n                state\r\n            );\r\n        }\r\n        case MAKE_ALL_DICES_CHECKED: {\r\n            return R.over(\r\n                R.lensProp('dicesValue'),\r\n                R.map(R.assoc('checked', true)),\r\n                state\r\n            );\r\n        }\r\n        case RESET_CURRENT_ROLL: {\r\n            return {\r\n                ...state,\r\n                currentRoll: 0\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst pickDice = (diceId, checked) => {\r\n    return {type: PICK_DICE, diceId, checked}\r\n}\r\nexport const getPickDice = (diceId, currentRoll, maxRoll, checked) => {\r\n    return (dispatch) => {\r\n        if (currentRoll < maxRoll && currentRoll > 0) {\r\n            dispatch(pickDice(diceId, !checked));\r\n        }\r\n    }\r\n}\r\n\r\nconst makeRoll = (newDicesValue, newCurrentRoll) => {\r\n    return {\r\n        type: MAKE_ROLL,newDicesValue,newCurrentRoll\r\n    }\r\n}\r\nconst writeMessageAboutStep = (newMessage) => {\r\n    return {\r\n        type: NEW_MESSAGE_ABOUT_STEP, newMessage\r\n    }\r\n}\r\n\r\nexport const newMessageAboutStep = (newMessage) => {\r\n    return (dispatch) => {\r\n        dispatch(writeMessageAboutStep(newMessage));\r\n    }\r\n}\r\n\r\nconst resetDices = () => {\r\n    return {\r\n        type: RESET_DICES\r\n    }\r\n}\r\n\r\nconst makeAllDicesChecked = () => {\r\n    return {\r\n        type: MAKE_ALL_DICES_CHECKED\r\n    }\r\n\r\n}\r\n\r\nconst resetCurrentRoll = () => {\r\n    return {\r\n        type: RESET_CURRENT_ROLL\r\n    }\r\n}\r\n\r\nexport const getResetDices = () => {\r\n    return (dispatch) => {\r\n        dispatch(resetDices());\r\n        dispatch(resetCurrentRoll());\r\n        dispatch(makeAllDicesChecked());\r\n    }\r\n}\r\n\r\n\r\nexport const getMakeRoll = (dicesValue, currentRoll, combinations) => {\r\n    return (dispatch) => {\r\n         let newDicesValue = makeNewDiceValue(dicesValue);\r\n\r\n         dispatch(resetPossibleValues())\r\n         dispatch(makeRoll(newDicesValue, currentRoll +1))\r\n        dispatch(getPossibleValue(getResultForAllCombination(newDicesValue, combinations)))\r\n    }\r\n}\r\nexport default dicesReducer;\r\n\r\n","import React from \"react\";\r\nimport Board from \"./Board\";\r\nimport {connect} from 'react-redux'\r\nimport { compose } from \"redux\";\r\nimport {writeResult, resetPossibleValues, getTotalScore, getPossibleValue} from \"../../redux/boardReducer\";\r\nimport {getMakeRoll, getPickDice, newMessageAboutStep, getResetDices} from \"../../redux/dicesReducer\";\r\n\r\nconst BoardContainer = (props) => {\r\n\r\n    return <Board\r\n        combinations={props.combinations}\r\n        dices = {props.dices}\r\n        writeResult={props.writeResult}\r\n        resetPossibleValues={props.resetPossibleValues}\r\n        getTotalScore={props.getTotalScore}\r\n        getPossibleValue={props.getPossibleValue}\r\n        getPickDice = {props.getPickDice}\r\n        getMakeRoll = {props.getMakeRoll}\r\n        newMessageAboutStep = {props.newMessageAboutStep}\r\n        getResetDices = {props.getResetDices}\r\n\r\n    />\r\n}\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        combinations: state.board.combinations,\r\n        dices: state.dices,\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        writeResult,\r\n        resetPossibleValues,\r\n        getTotalScore,\r\n        getPossibleValue,\r\n        getPickDice,\r\n        getMakeRoll,\r\n        newMessageAboutStep,\r\n        getResetDices\r\n    }),\r\n)(BoardContainer);\r\n\r\n","import React from 'react';\nimport './App.scss';\nimport {BrowserRouter, Redirect, Route, Switch} from 'react-router-dom'\nimport About from \"./components/About/About\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport BoardContainer from \"./components/Board/BoardContainer\";\n\nfunction App() {\n\n  return (\n// BrowserRouter  basename={process.env.PUBLIC_URL} - hashRouter for dev\n        <BrowserRouter basename={process.env.PUBLIC_URL} >\n            <div className=\"app-wrapper\">\n                <Navbar />\n                <Switch>\n                    <Route path=\"/\" exact render={() => <h1>Home Page</h1>}/>\n                    <Route path=\"/about\" component={About}/>\n\n                    <Route path=\"/board/:name\" component={BoardContainer}/>\n                    <Route path=\"/board\" component={BoardContainer}/>\n                    <Redirect to={'/'}/>\n                </Switch>\n            </div>\n        </BrowserRouter>\n\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {combineReducers} from 'redux'\r\nimport boardReducer from './boardReducer';\r\nimport dicesReducer from \"./dicesReducer\";\r\n\r\n\r\nexport default  combineReducers({\r\n   board: boardReducer,\r\n   dices: dicesReducer,\r\n})","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore, applyMiddleware, compose} from 'redux'\nimport {Provider} from 'react-redux'\n// import {reduxThunk, thunkMiddleware} from 'redux-thunk'\nimport thunkMiddleware from 'redux-thunk';\nimport reducers from \"./redux/reducers\";\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n// const composeEnhancers =\n//     typeof window === 'object' &&\n//     window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\n//         window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\n//         }) : compose;\n\n// const loggerMiddleware = store => next => action => {\n//     return next(action)\n// }\n\n// const store = createStore(reducers, composeEnhancers(applyMiddleware(\n//     loggerMiddleware,\n//     reduxThunk\n// )))\n\nconst store = createStore(reducers, composeEnhancers(   applyMiddleware(thunkMiddleware)\n));\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}